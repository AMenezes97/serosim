p <- ggplot(data=foe_all) +
geom_line(aes(x=Time,col=Group,y=value,group=interaction(Group,`Exposure ID`))) +
ylab("Probability of exposure per unit time") +
xlab("Time") +
facet_grid(Individual~`Exposure ID`)
}
y <- plot_exposure_model(exposure_model=exposure_model_simple_FOE, 1:365,2,1,foe_pars,NULL)
y
#'
#' @export
plot_exposure_model <- function(exposure_model, times, n_groups=1, n_exposures=1, foe_pars, demography=NULL, ...){
n_times <- length(times)
## Solve exposure probability for each demographic element
if(!is.null(demography)){
n_indivs <- unique(demography$i)
} else {
n_indivs <- 1
}
## Solve exposure probability for each exposure type, for each group, for each time
foe_all <- NULL
for(i in 1:n_indivs){
foe <- array(NA, dim=c(n_groups,n_times,n_exposures))
for(g in 1:n_groups){
for(x in 1:n_exposures){
foe[g,,x] <- unlist(sapply(times, function(t) exposure_model(1, t, x, g, foe_pars, demography, ...)))
}
}
foe <- reshape2::melt(foe)
colnames(foe) <- c("Group","Time","Exposure ID","value")
foe$`Exposure ID` <- paste0("Exposure ID: ", foe$`Exposure ID`)
foe$Individual <- paste0("Individual: ",i)
foe_all[[i]] <- foe
}
foe_all <- do.call("bind_rows", foe_all)
foe_all$Group <- as.factor(foe_all$Group)
foe_all$`Exposure ID` <- as.factor(foe_all$`Exposure ID`)
p <- ggplot(data=foe_all) +
geom_line(aes(x=Time,col=Group,y=value,group=interaction(Group,`Exposure ID`))) +
ylab("Probability of exposure per unit time") +
xlab("Time") +
theme_bw() +
facet_grid(Individual~`Exposure ID`)
}
y <- plot_exposure_model(exposure_model=exposure_model_simple_FOE, 1:365,2,1,foe_pars,NULL)
y
y <- plot_exposure_model(exposure_model=exposure_model_dem_mod, 1:365,2,1,foe_pars,NULL)
y <- plot_exposure_model(exposure_model=exposure_model_dem_mod, 1:365,2,1,foe_pars,demography = demography,dem_mod=dem_mod)
y
dem_mod
y <- plot_exposure_model(exposure_model=exposure_model_dem_mod, 1:365,1,2,foe_pars,demography = demography,dem_mod=dem_mod)
demography <- tibble(i = rep(1:n_indiv, each=n_times), t=rep(times,2),SES=rep(c("low","high"),each=n_times))
foe_pars <- array(NA, dim=c(n_groups,length(times),n_exposures))
foe_pars[1,,] <- 0.01
dem_mod <- tibble(exposure_id=c(1,1,2,2),column=c("SES","SES","SES","SES"),
value=c("low","high","low","high"),modifier=c(1,0.75,1,0.5))
y <- plot_exposure_model(exposure_model=exposure_model_dem_mod, 1:365,1,2,foe_pars,demography = demography,dem_mod=dem_mod)
foe_pars
foe_pars <- array(NA, dim=c(n_groups,length(times),n_exposures))
n_groups <- 1
n_exposures <- 2
foe_pars <- array(NA, dim=c(n_groups,length(times),n_exposures))
foe_pars[1,,] <- 0.01
y <- plot_exposure_model(exposure_model=exposure_model_dem_mod, 1:365,1,2,foe_pars,demography = demography,dem_mod=dem_mod)
y
demography
unique(demography$i)
y <- plot_exposure_model(exposure_model=exposure_model_dem_mod, 1:365,1,2,foe_pars,demography = demography,dem_mod=dem_mod)
#'
#' @export
plot_exposure_model <- function(exposure_model, times, n_groups=1, n_exposures=1, foe_pars, demography=NULL, ...){
n_times <- length(times)
## Solve exposure probability for each demographic element
if(!is.null(demography)){
n_indivs <- length(unique(demography$i))
} else {
n_indivs <- 1
}
## Solve exposure probability for each exposure type, for each group, for each time
foe_all <- NULL
for(i in 1:n_indivs){
foe <- array(NA, dim=c(n_groups,n_times,n_exposures))
for(g in 1:n_groups){
for(x in 1:n_exposures){
foe[g,,x] <- unlist(sapply(times, function(t) exposure_model(1, t, x, g, foe_pars, demography, ...)))
}
}
foe <- reshape2::melt(foe)
colnames(foe) <- c("Group","Time","Exposure ID","value")
foe$`Exposure ID` <- paste0("Exposure ID: ", foe$`Exposure ID`)
foe$Individual <- paste0("Individual: ",i)
foe_all[[i]] <- foe
}
foe_all <- do.call("bind_rows", foe_all)
foe_all$Group <- as.factor(foe_all$Group)
foe_all$`Exposure ID` <- as.factor(foe_all$`Exposure ID`)
p <- ggplot(data=foe_all) +
geom_line(aes(x=Time,col=Group,y=value,group=interaction(Group,`Exposure ID`))) +
ylab("Probability of exposure per unit time") +
xlab("Time") +
theme_bw() +
facet_grid(Individual~`Exposure ID`)
}
#'
#' @export
plot_exposure_model <- function(exposure_model, times, n_groups=1, n_exposures=1, foe_pars, demography=NULL, ...){
n_times <- length(times)
## Solve exposure probability for each demographic element
if(!is.null(demography)){
n_indivs <- length(unique(demography$i))
} else {
n_indivs <- 1
}
## Solve exposure probability for each exposure type, for each group, for each time
foe_all <- NULL
for(i in 1:n_indivs){
foe <- array(NA, dim=c(n_groups,n_times,n_exposures))
for(g in 1:n_groups){
for(x in 1:n_exposures){
foe[g,,x] <- unlist(sapply(times, function(t) exposure_model(1, t, x, g, foe_pars, demography, ...)))
}
}
foe <- reshape2::melt(foe)
colnames(foe) <- c("Group","Time","Exposure ID","value")
foe$`Exposure ID` <- paste0("Exposure ID: ", foe$`Exposure ID`)
foe$Individual <- paste0("Individual: ",i)
foe_all[[i]] <- foe
}
foe_all <- do.call("bind_rows", foe_all)
foe_all$Group <- as.factor(foe_all$Group)
foe_all$`Exposure ID` <- as.factor(foe_all$`Exposure ID`)
p <- ggplot(data=foe_all) +
geom_line(aes(x=Time,col=Group,y=value,group=interaction(Group,`Exposure ID`))) +
ylab("Probability of exposure per unit time") +
xlab("Time") +
theme_bw() +
facet_grid(Individual~`Exposure ID`)
}
y <- plot_exposure_model(exposure_model=exposure_model_dem_mod, 1:365,1,2,foe_pars,demography = demography,dem_mod=dem_mod)
y
dem_mod
source("~/Documents/GitHub/serosim/R/generate_plots.R", echo=TRUE)
y <- plot_exposure_model(exposure_model=exposure_model_dem_mod, 1:365,1,2,foe_pars,demography = demography,dem_mod=dem_mod)
foe
image(foe)
g
x
foe_pars <- array(NA, dim=c(n_groups,length(times),n_exposures))
foe_pars[1,,1] <- 0.01
foe_pars[1,,2] <- 0.005
y <- plot_exposure_model(exposure_model=exposure_model_dem_mod, 1:365,1,2,foe_pars,demography = demography,dem_mod=dem_mod)
foe
i
#'
#' @export
plot_exposure_model <- function(exposure_model, times, n_groups=1, n_exposures=1, foe_pars, demography=NULL, ...){
n_times <- length(times)
## Solve exposure probability for each demographic element
if(!is.null(demography)){
n_indivs <- length(unique(demography$i))
} else {
n_indivs <- 1
}
## Solve exposure probability for each exposure type, for each group, for each time
foe_all <- NULL
for(i in 1:n_indivs){
foe <- array(NA, dim=c(n_groups,n_times,n_exposures))
for(g in 1:n_groups){
for(x in 1:n_exposures){
foe[g,,x] <- unlist(sapply(times, function(t) exposure_model(i, t, x, g, foe_pars, demography, ...)))
}
}
foe <- reshape2::melt(foe)
colnames(foe) <- c("Group","Time","Exposure ID","value")
foe$`Exposure ID` <- paste0("Exposure ID: ", foe$`Exposure ID`)
foe$Individual <- paste0("Individual: ",i)
foe_all[[i]] <- foe
}
foe_all <- do.call("bind_rows", foe_all)
foe_all$Group <- as.factor(foe_all$Group)
foe_all$`Exposure ID` <- as.factor(foe_all$`Exposure ID`)
p <- ggplot(data=foe_all) +
geom_line(aes(x=Time,col=Group,y=value,group=interaction(Group,`Exposure ID`))) +
ylab("Probability of exposure per unit time") +
xlab("Time") +
theme_bw() +
facet_grid(Individual~`Exposure ID`)
}
y <- plot_exposure_model(exposure_model=exposure_model_dem_mod, 1:365,1,2,foe_pars,demography = demography,dem_mod=dem_mod)
y
devtools::document()
?plot_exposure_model
devtools::document()
?plot_exposure_model
foe_pars <- array(NA, dim=c(n_groups,length(times),n_exposures))
foe_pars[1,,1] <- 0.01
foe_pars[1,,2] <- 0.005
demography <- tibble(i = rep(1:n_indiv, each=n_times), t=rep(times,2),
SES=rep(c("low","high"),each=n_times))
dem_mod <- tibble(exposure_id=c(1,1,2,2),column=c("SES","SES","SES","SES"),
value=c("low","high","low","high"),modifier=c(1,0.75,1,0.5))
plot_exposure_model(exposure_model=exposure_model_dem_mod, 1:365,
1,2,foe_pars,demography = demography,dem_mod=dem_mod)
[Package serosim version 0.0.0.9000 ]
foe_pars <- array(NA, dim=c(n_groups,length(times),n_exposures))
foe_pars[1,,1] <- 0.01
foe_pars[1,,2] <- 0.005
demography <- tibble(i = rep(1:n_indiv, each=n_times), t=rep(times,2),
SES=rep(c("low","high"),each=n_times))
dem_mod <- tibble(exposure_id=c(1,1,2,2),column=c("SES","SES","SES","SES"),
value=c("low","high","low","high"),modifier=c(1,0.75,1,0.5))
plot_exposure_model(exposure_model=exposure_model_dem_mod, 1:365,
1,2,foe_pars,demography = demography,dem_mod=dem_mod)
foe_pars <- array(NA, dim=c(n_groups,length(times),n_exposures))
foe_pars[1,,1] <- 0.05
foe_pars[1,,2] <- 0.005
demography <- tibble(i = rep(1:n_indiv, each=n_times), t=rep(times,2),
SES=rep(c("low","high"),each=n_times))
dem_mod <- tibble(exposure_id=c(1,1,2,2),column=c("SES","SES","SES","SES"),
value=c("low","high","low","high"),modifier=c(1,0.75,1,0.5))
plot_exposure_model(exposure_model=exposure_model_dem_mod, 1:365,
1,2,foe_pars,demography = demography,dem_mod=dem_mod)
foe_pars <- array(NA, dim=c(n_groups,length(times),n_exposures))
foe_pars[1,,1] <- 0.05
foe_pars[1,,2] <- 0.005
demography <- tibble(i = rep(1:n_indiv, each=n_times), t=rep(times,2),
SES=rep(c("low","high"),each=n_times))
dem_mod <- tibble(exposure_id=c(1,1,2,2),column=c("SES","SES","SES","SES"),
value=c("low","high","low","high"),modifier=c(1,0.75,1,0.5))
y <- plot_exposure_model(exposure_model=exposure_model_dem_mod, 1:365,
1,2,foe_pars,demography = demography,dem_mod=dem_mod)
y
source("/Volumes/GoogleDrive/My Drive/Teaching/SIR models/sir.R", echo=TRUE)
#############################################
######## FREQUENCY DEPENDENT VERSION ########
#############################################
## Declare model parameters
R0 <- 1.5 ## Something flu like
gamma <- 1/5 ## People recover after 5 days on average, so a rate of 1/5 per day
beta <- R0*gamma ## Get transmission rate from above pars
I0 <- 0.00001 ## Proportion of population initially infected, the seed
times <- seq(0,365,by=0.1) ## Vector of times to solve model over. Smaller time steps more accurate but slower.
initial_states <- c(S=1-I0, I=I0, R=0)
pars <- c(beta=beta,gamma=gamma)
SIR_odes_with <- function(t, States, pars){
with(as.list(c(States,pars)),{
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
})
}
tmp_pars <- foe_pars[foe_pars$x == x & foe_pars$g == g,]
pars <- tmp_pars$value
foe_pars <- tibble(x=1,g=1,name=c("beta","gamma","I0"),value=c(1.5/5, 1/5, 0.00001))
SIR_odes_with <- function(t, States, pars){
with(as.list(c(States,pars)),{
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
})
}
tmp_pars <- foe_pars[foe_pars$x == x & foe_pars$g == g,]
pars <- tmp_pars$value
names(pars) <- tmp_pars$name
initial_states <- c(S=1-pars["I0"],pars["I0"],0)
res <- deSolve::ode(y=initial_states, times=times, func=SIR_odes_with, parms= pars)
initial_states
initial_states <- c(S=1-pars["I0"],I=pars["I0"],R=0)
res <- deSolve::ode(y=initial_states, times=times, func=SIR_odes_with, parms= pars)
SIR_odes_with <- function(t, y, pars){
with(as.list(c(States,pars)),{
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
})
}
tmp_pars <- foe_pars[foe_pars$x == x & foe_pars$g == g,]
pars <- tmp_pars$value
names(pars) <- tmp_pars$name
initial_states <- c(S=1-pars["I0"],I=pars["I0"],R=0)
res <- deSolve::ode(y=initial_states, times=times, func=SIR_odes_with, parms= pars)
SIR_odes_with <- function(t, y, pars){
with(as.list(c(y,pars)),{
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
})
}
tmp_pars <- foe_pars[foe_pars$x == x & foe_pars$g == g,]
pars <- tmp_pars$value
names(pars) <- tmp_pars$name
initial_states <- c(S=1-pars["I0"],I=pars["I0"],R=0)
res <- deSolve::ode(y=initial_states, times=times, func=SIR_odes_with, parms= pars)
initial_states
tmp_pars <- foe_pars[foe_pars$x == x & foe_pars$g == g,]
pars <- tmp_pars$value
initial_states <- c(S=1-pars["I0"],I=pars["I0"],R=0)
names(pars) <- tmp_pars$name
res <- deSolve::ode(y=initial_states, times=times, func=SIR_odes_with, parms= pars)
times
res
initial_states
pars
tmp_pars <- foe_pars[foe_pars$x == x & foe_pars$g == g,]
pars <- tmp_pars$value
names(pars) <- tmp_pars$name
initial_states <- c(S=1-pars["I0"],I=pars["I0"],R=0)
names(initial_states) <- c("S","I","R")
res <- deSolve::ode(y=initial_states, times=times, func=SIR_odes_with, parms= pars)
initial_states
pars
x <- 1
g <- 1
tmp_pars <- foe_pars[foe_pars$x == x & foe_pars$g == g,]
pars <- tmp_pars$value
names(pars) <- tmp_pars$name
initial_states <- c(S=1-pars["I0"],I=pars["I0"],R=0)
names(initial_states) <- c("S","I","R")
res <- deSolve::ode(y=initial_states, times=times, func=SIR_odes_with, parms= pars)
res
head(res)
plot(res[,"I"])
SIR_odes_with <- function(t, y, pars){
with(as.list(c(y,pars)),{
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
dInc <- beta*S*I
return(list(c(dS, dI, dR, dInc)))
})
}
tmp_pars <- foe_pars[foe_pars$x == x & foe_pars$g == g,]
pars <- tmp_pars$value
names(pars) <- tmp_pars$name
initial_states <- c(S=1-pars["I0"],I=pars["I0"],R=0)
names(initial_states) <- c("S","I","R","inc")
res <- deSolve::ode(y=initial_states, times=times, func=SIR_odes_with, parms= pars)
initial_states <- c(S=1-pars["I0"],I=pars["I0"],R=0,inc=0)
names(initial_states) <- c("S","I","R","inc")
res <- deSolve::ode(y=initial_states, times=times, func=SIR_odes_with, parms= pars)
res
res[,5]
exposure_model_sir <- function(i, t, x, g, foe_pars, demography=NULL,time_res=1){
SIR_odes_with <- function(t, y, pars){
with(as.list(c(y,pars)),{
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
dInc <- beta*S*I
return(list(c(dS, dI, dR, dInc)))
})
}
times <- seq(0,t,by=time_res)
tmp_pars <- foe_pars[foe_pars$x == x & foe_pars$g == g,]
pars <- tmp_pars$value
names(pars) <- tmp_pars$name
initial_states <- c(S=1-pars["I0"],I=pars["I0"],R=0,inc=0)
names(initial_states) <- c("S","I","R","inc")
res <- deSolve::ode(y=initial_states, times=times, func=SIR_odes_with, parms= pars)
res[which(times == t),4]
}
exposure_model_sir(1,100,1,1,foe_pars,NULL)
sapply(exposure_model_sir(1,seq(0,365,by=1),1,1,foe_pars,NULL))
sapply(times, function(t) exposure_model_sir(1,t,1,1,foe_pars,NULL))
times <- seq(1,365,by=1)
sapply(times, function(t) exposure_model_sir(1,t,1,1,foe_pars,NULL))
y <- sapply(exposure_model_sir(1,seq(0,365,by=1),1,1,foe_pars,NULL))
y <- sapply(times, function(t) exposure_model_sir(1,t,1,1,foe_pars,NULL))
plot(y)
y
diff(y)
plot(diff(y))
length(plot(diff(y)))
length(y)
length(times)
exposure_model_sir <- function(i, t, x, g, foe_pars, demography=NULL,time_res=1){
SIR_odes_with <- function(t, y, pars){
with(as.list(c(y,pars)),{
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
dInc <- beta*S*I
return(list(c(dS, dI, dR, dInc)))
})
}
times <- seq(0,t,by=time_res)
tmp_pars <- foe_pars[foe_pars$x == x & foe_pars$g == g,]
pars <- tmp_pars$value
names(pars) <- tmp_pars$name
initial_states <- c(S=1-pars["I0"],I=pars["I0"],R=0,inc=0)
names(initial_states) <- c("S","I","R","inc")
res <- deSolve::ode(y=initial_states, times=times, func=SIR_odes_with, parms= pars)
diff(res[,"inc"])[which(times == t)]
}
y <- sapply(times, function(t) exposure_model_sir(1,t,1,1,foe_pars,NULL))
plot(y)
y
exposure_model_sir <- function(i, t, x, g, foe_pars, demography=NULL,time_res=1){
SIR_odes_with <- function(t, y, pars){
with(as.list(c(y,pars)),{
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
dInc <- beta*S*I
return(list(c(dS, dI, dR, dInc)))
})
}
times <- seq(0,t,by=time_res)
tmp_pars <- foe_pars[foe_pars$x == x & foe_pars$g == g,]
pars <- tmp_pars$value
names(pars) <- tmp_pars$name
initial_states <- c(S=1-pars["I0"],I=pars["I0"],R=0,inc=0)
names(initial_states) <- c("S","I","R","inc")
res <- deSolve::ode(y=initial_states, times=times, func=SIR_odes_with, parms= pars)
browser()
diff(res[,"inc"])[which(times == t)]
}
y <- sapply(times, function(t) exposure_model_sir(1,t,1,1,foe_pars,NULL))
res
diff(res[,"inc"])[which(times == t)]
t
which(times == t)
res
res
exposure_model_sir <- function(i, t, x, g, foe_pars, demography=NULL,time_res=1){
SIR_odes_with <- function(t, y, pars){
with(as.list(c(y,pars)),{
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
dInc <- beta*S*I
return(list(c(dS, dI, dR, dInc)))
})
}
times <- seq(0,t,by=time_res)
tmp_pars <- foe_pars[foe_pars$x == x & foe_pars$g == g,]
pars <- tmp_pars$value
names(pars) <- tmp_pars$name
initial_states <- c(S=1-pars["I0"],I=pars["I0"],R=0,inc=0)
names(initial_states) <- c("S","I","R","inc")
res <- deSolve::ode(y=initial_states, times=times, func=SIR_odes_with, parms= pars)
diff(c(0,res[,"inc"]))[which(times == t)]
}
y <- sapply(times, function(t) exposure_model_sir(1,t,1,1,foe_pars,NULL))
plot(y)
devtools::document9)
devtools::document()
devtools::load_all()
plot_exposure_model(exposure_model_sir, seq(1,365,by=1),n_groups = 1,n_exposures = 1,foe_pars=foe_pars)
warnings()
p <- plot_exposure_model(exposure_model_sir, seq(1,365,by=1),n_groups = 1,n_exposures = 1,foe_pars=foe_pars)
p
foe_pars
foe_pars <- tibble(x=1,g=1,name=c("beta","gamma","I0","R0"),value=c(0.3,0.2,0.00001,0))
p <- plot_exposure_model(exposure_model_sir, seq(1,365,by=1),n_groups = 1,n_exposures = 1,foe_pars=foe_pars)
p
foe_pars <- bind_rows(tibble(x=1,g=1,name=c("beta","gamma","I0","R0"),value=c(0.3,0.2,0.00001,0)),tibble(x=2,g=1,name=c("beta","gamma","I0","R0"),value=c(0.35,0.2,0.00001,0)))
p <- plot_exposure_model(exposure_model_sir, seq(1,365,by=1),n_groups = 1,n_exposures = 1,foe_pars=foe_pars)
p <- plot_exposure_model(exposure_model_sir, seq(1,365,by=1),n_groups = 1,n_exposures = 2,foe_pars=foe_pars)
p
foe_pars <- bind_rows(tibble(x=1,g=1,name=c("beta","gamma","I0","R0","t0"),value=c(0.3,0.2,0.00001,0,0)),tibble(x=2,g=1,name=c("beta","gamma","I0","R0","t0"),value=c(0.35,0.2,0.00001,0,50)))
p <- plot_exposure_model(exposure_model_sir, seq(1,365,by=1),n_groups = 1,n_exposures = 2,foe_pars=foe_pars)
p
devtools::load_all()
p <- plot_exposure_model(exposure_model_sir, seq(1,365,by=1),n_groups = 1,n_exposures = 2,foe_pars=foe_pars)
p
foe_pars <- bind_rows(tibble(x=1,g=1,name=c("beta","gamma","I0","R0","t0"),value=c(0.3,0.2,0.00001,0,0)),tibble(x=2,g=1,name=c("beta","gamma","I0","R0","t0"),value=c(0.35,0.2,0.00001,0,200)))
p <- plot_exposure_model(exposure_model_sir, seq(1,365,by=1),n_groups = 1,n_exposures = 2,foe_pars=foe_pars)
p
foe_pars <- bind_rows(
tibble(x=1,g=1,name=c("beta","gamma","I0","R0","t0"),value=c(0.3,0.2,0.00001,0,0)),
tibble(x=2,g=1,name=c("beta","gamma","I0","R0","t0"),value=c(0.35,0.25,0.00001,0,200))
tibble(x=1,g=2,name=c("beta","gamma","I0","R0","t0"),value=c(0.5,0.2,0.00005,0,0)),
foe_pars <- bind_rows(
tibble(x=1,g=1,name=c("beta","gamma","I0","R0","t0"),value=c(0.3,0.2,0.00001,0,0)),
tibble(x=2,g=1,name=c("beta","gamma","I0","R0","t0"),value=c(0.35,0.25,0.00001,0,200)),
tibble(x=1,g=2,name=c("beta","gamma","I0","R0","t0"),value=c(0.5,0.2,0.00005,0,0)),
tibble(x=2,g=2,name=c("beta","gamma","I0","R0","t0"),value=c(0.1,0.25,0.00001,0,300))
)
plot_exposure_model(exposure_model_sir, seq(1,365,by=1),n_groups = 2,n_exposures = 2,foe_pars=foe_pars)
p <- plot_exposure_model(exposure_model_sir, seq(1,365,by=1),n_groups = 2,n_exposures = 2,foe_pars=foe_pars)
p
foe_pars <- bind_rows(
tibble(x=1,g=1,name=c("beta","gamma","I0","R0","t0"),value=c(0.3,0.2,0.00001,0,0)),
tibble(x=2,g=1,name=c("beta","gamma","I0","R0","t0"),value=c(0.35,0.25,0.00001,0,200)),
tibble(x=1,g=2,name=c("beta","gamma","I0","R0","t0"),value=c(0.5,0.2,0.00005,0,0)),
tibble(x=2,g=2,name=c("beta","gamma","I0","R0","t0"),value=c(0.1,0.25,0.00001,0,50))
)
plot_exposure_model(exposure_model_sir, seq(1,365,by=1),n_groups = 2,n_exposures = 2,foe_pars=foe_pars)
p <- plot_exposure_model(exposure_model_sir, seq(1,365,by=1),n_groups = 2,n_exposures = 2,foe_pars=foe_pars)
p
devtools::document()
?plot_exposure_model
foe_pars <- bind_rows(
tibble(x=1,g=1,name=c("beta","gamma","I0","R0","t0"),value=c(0.3,0.2,0.00001,0,0)),
tibble(x=2,g=1,name=c("beta","gamma","I0","R0","t0"),value=c(0.35,0.25,0.00001,0,200)),
tibble(x=1,g=2,name=c("beta","gamma","I0","R0","t0"),value=c(0.5,0.2,0.00005,0,0)),
tibble(x=2,g=2,name=c("beta","gamma","I0","R0","t0"),value=c(0.27,0.2,0.00001,0,50))
)
plot_exposure_model(exposure_model_sir, seq(1,365,by=1),n_groups = 2,n_exposures = 2,foe_pars=foe_pars)
foe_pars <- bind_rows(
tibble(x=1,g=1,name=c("beta","gamma","I0","R0","t0"),value=c(0.3,0.2,0.00001,0,0)),
tibble(x=2,g=1,name=c("beta","gamma","I0","R0","t0"),value=c(0.35,0.25,0.00001,0,200)),
tibble(x=1,g=2,name=c("beta","gamma","I0","R0","t0"),value=c(0.5,0.2,0.00005,0,0)),
tibble(x=2,g=2,name=c("beta","gamma","I0","R0","t0"),value=c(0.27,0.2,0.00001,0,50))
)
p <- plot_exposure_model(exposure_model_sir, seq(1,365,by=1),n_groups = 2,n_exposures = 2,foe_pars=foe_pars)
p
devtools::document()
