ggtitle("All Cts over time relative to peak by variant")
ggplot(ct_dat1 %>% filter(DaysSinceDetection >= -10, DaysSinceDetection < 20, CtT1 > 0)) +
geom_line(aes(x=DaysSinceDetection,y=CtT1,group=interaction(PersonID, CumulativeInfectionNumber)),alpha=0.1) +
geom_smooth(aes(x=DaysSinceDetection,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_wrap(~LineageBroad)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time since detection by variant")
ggplot(ct_dat1 %>% filter(TimeRelToPeak >= -10, TimeRelToPeak < 20, CtT1 > 0)) +
geom_line(aes(x=TimeRelToPeak,y=CtT1,group=PersonID),alpha=0.1) +
geom_smooth(aes(x=TimeRelToPeak,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_grid(LineageBroad~CumulativeInfectionNumber)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time relative to peak by variant and number of prior infections")
ggplot(ct_dat1 %>% filter(TimeRelToPeak >= -10, TimeRelToPeak < 20, CtT1 > 0)) +
geom_line(aes(x=TimeRelToPeak,y=CtT1,group=PersonID),alpha=0.1) +
geom_smooth(aes(x=TimeRelToPeak,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_wrap(~CumulativeInfectionNumber)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time relative to peak by number of prior infections")
ggplot(ct_dat1 %>% filter(TimeRelToPeak >= -10, TimeRelToPeak < 20, CtT1 > 0)) +
geom_line(aes(x=TimeRelToPeak,y=CtT1,group=PersonID),alpha=0.1) +
geom_smooth(aes(x=TimeRelToPeak,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_wrap(~CumulativeExposureNumber)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time relative to peak by number of prior exposures")
ggplot(ct_dat1 %>% filter(DaysSinceDetection >= -10, DaysSinceDetection < 20, CtT1 > 0)) +
geom_line(aes(x=DaysSinceDetection,y=CtT1,group=PersonID),alpha=0.1) +
geom_smooth(aes(x=DaysSinceDetection,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_grid(LineageBroad~CumulativeInfectionNumber)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time since detection by variant and number of prior infections")
ggplot(ct_dat1 %>% filter(DaysSinceDetection >= -10, DaysSinceDetection < 20, CtT1 > 0)) +
geom_line(aes(x=DaysSinceDetection,y=CtT1,group=PersonID),alpha=0.1) +
geom_smooth(aes(x=DaysSinceDetection,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_wrap(~CumulativeInfectionNumber)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time since detection by number of prior infections")
ggplot(ct_dat1 %>% filter(DaysSinceDetection >= -10, DaysSinceDetection < 20, CtT1 > 0)) +
geom_line(aes(x=DaysSinceDetection,y=CtT1,group=PersonID),alpha=0.1) +
geom_smooth(aes(x=DaysSinceDetection,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_wrap(~CumulativeExposureNumber)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time since detection by number of prior exposures")
dev.off()
}
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/prep_data_for_regressions.R')
p_titers1
dat
colnames(dat)
dat %>% filter(TiterMeasured == 1)
dat_titer_tmp
# Clean data --------------------------------------------------------------
## Read in cleaned data
dat <- read_csv("data/ct_data_cleaned.csv")
head(dat)
dat %>% filter(TiterMeasured == 1)
dat %>% filter(NewInfectionIdentified == 1)
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/raw_data.R')
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/raw_data.R')
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/raw_data.R')
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/raw_data.R')
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/raw_data.R')
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/raw_data.R')
load("/Users/james/Documents/GitHub/SC2-kinetics-immune-history/data/data_for_regressions.RData")
dat_subset_use
dat_subset_use %>% View
ct_dat <- read_csv("data/ct_data_cleaned.csv")
ct_dat_repeats <- read_csv("data/ct_data_cleaned_repeats.csv")
ids <- ct_dat %>% select(PersonID) %>% distinct() %>% pull(PersonID)
ids_shuffled <- sample(ids)
new_ids <- tibble(PersonID=ids, PersonIDShuffled=ids_shuffled)
ct_dat <- ct_dat %>% left_join(new_ids) %>% select(-PersonID) %>% rename(PersonID=PersonIDShuffled)
ct_dat_repeats <- ct_dat_repeats %>% left_join(new_ids) %>% select(-PersonID) %>% rename(PersonID=PersonIDShuffled)
write_csv(ct_dat, "data/ct_data_cleaned.csv")
write_csv(ct_dat, "data/ct_data_cleaned_repeats.csv")
getwd()
source('~/.active-rstudio-document')
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/prep_data_for_regressions.R')
head(dat)
dat$PersonID
new_ids
View(dat)
source('~/Documents/GitHub/ct_nba/scripts/age_explore.R', echo=TRUE)
source('~/Documents/GitHub/ct_nba/scripts/age_explore.R', echo=TRUE)
source('~/Documents/GitHub/ct_nba/scripts/age_explore.R', echo=TRUE)
source('~/Documents/GitHub/ct_nba/scripts/age_explore.R', echo=TRUE)
dfcount2test <- data.frame(c(155,290),c(2,2))
colnames(dfcount2test) <- c("X1","X10")
dfcount2test <- data.frame(sapply(dfcount2test, as.numeric))
print(dfcount2test)
dfwell <- dfcount2test %>% rowwise() %>% mutate(
test_stat = chisq.test(data.frame(c(X1, X10),c(291-X1,2-X10)))$statistic
)
##Coding question for James
library(tidyverse)
dfcount2test <- data.frame(c(155,290),c(2,2))
colnames(dfcount2test) <- c("X1","X10")
dfcount2test <- data.frame(sapply(dfcount2test, as.numeric))
print(dfcount2test)
dfwell <- dfcount2test %>% rowwise() %>% mutate(
test_stat = chisq.test(data.frame(c(X1, X10),c(291-X1,2-X10)))$statistic
)
print(dfwell)
dfwell2 <- dfcount2test %>% rowwise() %>% mutate(
test_stat = chisq.test(data.frame(c(dfcount2test[,1], dfcount2test[,2]),c(291-dfcount2test[,1],2-dfcount2test[,2])))$statistic
)
?chisq.test
data.frame(c(155,2,291-155,2-2))
data.frame(c(155,2),c(291-155,2-2))
dfwell2 <- dfcount2test %>% rowwise() %>% mutate(
test_stat = chisq.test(data.frame(c(dfcount2test[,1], dfcount2test[,2]),c(291-dfcount2test[,1],2-dfcount2test[,2])))$statistic
)
print(dfwell2)
dfcount2test
dfcount2test[,1]
dfcount2test
dfwell2 <- dfcount2test %>% rowwise() %>% mutate(
test_stat = chisq.test(data.frame(c(X1, X2),c(291-X1,2-X2)))$statistic
)
dfwell2 <- dfcount2test %>% rowwise() %>% mutate(
test_stat = chisq.test(data.frame(c(X1, X10),c(291-X1,2-X10)))$statistic
)
print(dfwell2)
#dfssss2 <- data.frame(c(dfcount2test[,1], dfcount2test[,2]),c(291-dfcount2test[,1],2-dfcount2test[,2]))
use_indices <- colnames(dfcount2test)
#dfssss2 <- data.frame(c(dfcount2test[,1], dfcount2test[,2]),c(291-dfcount2test[,1],2-dfcount2test[,2]))
use_colnames <- colnames(dfcount2test)
dfwell2 <- dfcount2test %>% rowwise() %>% mutate(
test_stat = chisq.test(data.frame(c(use_colnames[1], use_colnames[2]),c(291-use_colnames[1],2-use_colnames[2])))$statistic
)
use_colnames[1]
setwd("~/Documents/GitHub/serosim/scripts")
## Load necessary packages
devtools::load_all("~/Documents/GitHub/serosim")
library(tidyverse)
library(data.table)
library(ggplot2)
##***************************1.1: Simulation Settings****************************
## Specify the number of time periods to simulate
## Since children in Keya's data set are 0.7 to 14.99, let's simulate 15 years
## I decided to use monthly time steps since case study 1 model_pars parameters are
## already structured for monthly time steps
times <- seq(1,180,by=1)
## Set simulation settings needed for runserosim
simulation_settings <- list("t_start"=1,"t_end"=max(times))
## Specify the number of individuals in the simulation to match the number of individual's in Keya's data
N<-100
##***************************1.2: Population Demography**************************
## Generate the population demography tibble
## Specify options for each demography element and the distribution of each within the population
## We are interested in simulating a population where individuals have varying nutritional statuses and can reside in either of 2 locations
aux <- list("Group"=list("name"="group","options"=c("1", "2", "3", "4"), "distribution"=c(0.2638132,0.2245136,0.2587549,0.2529183)))
## Let's assume that no individuals are removed from the population and set prob_removal to 0
demography <- generate_pop_demography(N, times, limit=0, removal_min=0, removal_max=max(times), prob_removal=0, aux=aux)
# demography <- generate_pop_demography(N, times, birth_times, limit=0, removal_min=0, removal_max=max(times), prob_removal=0, aux=aux)
## Count the number of individuals in each group/location
demography %>% filter(times==1) %>% count(group)
##********************************1.3: Biomarker Map*******************************
## Create biomarker map
## We are only interested in 3 exposure types (MCV1,MCV2 and natural infection) against one biomarker
biomarker_map <- tibble(exposure_id=c(1,2,3),biomarker_id=c(1,1,1))
##***************************1.4: Force of Infection and Exposure Model***********
## Create an empty array to store the force of infection for all exposure types
foe_pars <- array(0, dim=c(n_distinct(demography$group),max(times),n_distinct(biomarker_map$exposure_id)))
## Specify the force of infection for exposure ID 1 which represents natural infection
foe_pars[,,1] <- 0.2
## Specify the force of vaccination for exposure ID 2 which represents MCV1 vaccination
foe_pars[,,2] <- 0.4
## Specify the force of vaccination for exposure ID 3 which represents MCV2 vaccination
foe_pars[,,3] <- 0.05
## Specify a simple exposure model which calculates the probability of exposure directly from the force of infection at that time step
## In this selected model, the probability of exposure is 1-exp(-FOI) where FOI is the force of infection at that time.
exposure_model<-exposure_model_simple_FOI
##********************************1.5: Immunity Model*****************************
## Specify immunity model within serosim function below
immunity_model<-immunity_model_vacc_ifxn_titer_prot
## Load necessary packages
devtools::load_all("~/Documents/GitHub/serosim")
## Specify a simple exposure model which calculates the probability of exposure directly from the force of infection at that time step
## In this selected model, the probability of exposure is 1-exp(-FOI) where FOI is the force of infection at that time.
exposure_model<-exposure_model_simple_FOI
getwd()
setwd("..")
document()
devtools::document()
## Load necessary packages
devtools::load_all("~/Documents/GitHub/serosim")
## Specify a simple exposure model which calculates the probability of exposure directly from the force of infection at that time step
## In this selected model, the probability of exposure is 1-exp(-FOI) where FOI is the force of infection at that time.
exposure_model<-exposure_model_simple_FOI
## Specify a simple exposure model which calculates the probability of exposure directly from the force of infection at that time step
## In this selected model, the probability of exposure is 1-exp(-FOI) where FOI is the force of infection at that time.
exposure_model<-exposure_model_simple_FOE
##********************************1.5: Immunity Model*****************************
## Specify immunity model within serosim function below
immunity_model<-immunity_model_vacc_ifxn_titer_prot
## Specify which exposure IDs represent vaccination events
vacc_exposures<-c(2,3)
## Specify the age at which an individual is eligible for MCV1 and MCV2 vaccination
vacc_age<-c(NA,9,12)
## Specify the maximum number of vaccines an individual can receive for each exposure types; note non vaccine exposures are listed as NAs
## DOUBLE CHECK WITH KEYA ##
max_vacc_events<-c(NA,1,1)
## Plot titer-mediated protection curve given parameters specified within model_pars for biomarker 1 which will be loaded in section 1.6
plot_titer_mediated_protection(0:7500, titer_prot_midpoint=5000, titer_prot_width=.001)
immunity_model_vacc_ifxn_titer_prot
?immunity_model_vacc_ifxn_titer_prot
## Specify which exposure IDs represent vaccination events
vacc_exposures<-c(2,3)
## Specify the age at which an individual is eligible for MCV1 and MCV2 vaccination
vacc_age<-c(NA,9,12)
## Specify the maximum number of vaccines an individual can receive for each exposure types; note non vaccine exposures are listed as NAs
## DOUBLE CHECK WITH KEYA ##
max_vacc_events<-c(NA,1,1)
## Plot titer-mediated protection curve given parameters specified within model_pars for biomarker 1 which will be loaded in section 1.6
plot_titer_mediated_protection(0:7500, titer_prot_midpoint=5000, titer_prot_width=.001)
##****1.6: Antibody Model, Antibody Kinetics Parameters, and draw_parameters*****
## Specify the antibody model
antibody_model<-antibody_model_biphasic
## Bring in the antibody parameters needed for the antibody model
## Note that the titer-mediated protection parameters needed for the immunity model (Section 1.5), the titer-ceiling parameters needed for draw_parameters and the observation error parameter needed for the observation model (Section 1.7) are all defined here too.
## Also note that these are all arbitrary parameter values loosely informed by plausible values.
model_pars_path <- system.file("extdata", "model_pars_keya.csv", package = "serosim")
model_pars <- read.csv(file = model_pars_path, header = TRUE)
model_pars
## Specify the draw_parameters function to use
draw_parameters<-draw_parameters_random_fx_titer_dep
## Plot titer dependent boosting effects given parameters specified within model_pars for biomarker 1 (measles)
plot_titer_dependent_boosting(start=0, end=1500, by=1, titer_ceiling_threshold=1000, titer_ceiling_gradient=0.0009)
## Specify the limits of detection for each biomarker for the continuous assays (lower detection limit is 8IU/I and the upper is 5000 IU/I)
bounds<-tibble(biomarker_id=c(1,1),name=c("lower_bound","upper_bound"),value=c(8,5000))
## Specify the observation model
observation_model<-observation_model_continuous_bounded_noise
## Specify observation_times (serological survey sampling design) to observe biomarker 1 (aka measles antibody titer) across all individuals at the end of the simulation
observation_times<-tibble(i=1:N,t=max(times), b=1)
##***************************1.9 Run Simulation*************************************
res<- runserosim(
simulation_settings,
demography,
observation_times,
foe_pars,
biomarker_map,
model_pars,
exposure_model,
immunity_model,
antibody_model,
observation_model,
draw_parameters,
## Other arguments needed
bounds=bounds,
max_vacc_events=max_vacc_events,
vacc_exposures=vacc_exposures,
vacc_age=vacc_age,
)
##***************************1.9 Run Simulation*************************************
res<- runserosim(
simulation_settings,
demography,
observation_times,
foe_pars,
biomarker_map,
model_pars,
exposure_model,
immunity_model,
antibody_model,
observation_model,
draw_parameters,
## Other arguments needed
bounds=bounds,
max_vacc_events=max_vacc_events,
vacc_exposures=vacc_exposures,
vacc_age=vacc_age,
VERBOSE=TRUE
)
##***************************1.10 Generate Plots************************************
## Plot antibody states and exposure histories for 10 individuals
plot_subset_individuals_history(res$antibody_states, res$exposure_histories_long, subset=5, demography)
## Plot exposure histories for all exposure types
plot_exposure_histories(res$exposure_histories_long)
## Plot exposure probabilities for all exposure types
plot_exposure_prob(res$exposure_probabilities_long)
## Plot antibody states for all individuals
plot_titers(res$antibody_states)
## Plot observed titers
plot_obs_titers_one_sample(res$observed_antibody_states)
## Note that the simulated kinetics parameters are also stored
head(res$kinetics_parameters)
##*****************Generate Data Set with Keya's Format ***************************
##*## Post Simulation Variables
## mom_indicator:  binary indicator of if an individual had mother recall of any mcv dose among children with or without card
## card_indicator: binary indicator of if an individual had record (via card) of any mcv dose
## none_indicator = binary indicator of if an individual had neither card nor recall
## Combine runserosim outputs into a data set for Keya
df<-res$observed_antibody_states %>% select(i,t,observed)
dem<-demography %>% filter(times==max(times)) %>% select(i,birth,group) %>% rename(location=group)
df<- right_join(df, dem, by="i")
df<- df %>% mutate(age=(t-birth)/12)
df <- df %>%  mutate(age_yr=floor(age)) %>% mutate(titer=ifelse(observed>0,log10(observed),0)) %>% select(i,t,age,age_yr,location, titer)
## Pull true vaccination and infection times from runserosim exposure history output
exp_hist <- res$exposure_histories_long %>%  filter(value==1)
inf_hist <- exp_hist %>% filter(x==1) %>% select(i,t) %>% rename(inf_time=t)
MCV1_hist <- exp_hist %>% filter(x==2) %>% select(i,t)  %>% rename(MCV1=t)
MCV2_hist <- exp_hist %>% filter(x==3) %>% select(i,t)  %>% rename(MCV2=t)
## Add vacc time to df
df$MCV1<-NA
df$MCV2<-NA
df <- df %>% rows_update(MCV1_hist, by="i") %>% rows_update(MCV2_hist, by="i")
## Add days since vaccination
df<- df %>% mutate(daysbtwnmcvenr_1=180-MCV1, daysbtwnmcvenr_2=180-MCV2)
## Add number of natrual infections to df (this will be hidden from Keya)
inf_count <- inf_hist %>% count(i) %>% rename(num_infs=n)
exposure_model
plot(exposure_model, foe_pars)
res$exposure_probabilities
res$exposure_force
plot(res$exposure_force[1,]
)
plot(res$exposure_force[1,,])
plot(res$exposure_force[,1,])
plot(res$exposure_force[,,1])
res$exposure_force
res$exposure_force[,,1]
res$exposure_force[,,1][1,]
plot(res$exposure_force[,,1][1,])
##***************************1.4: Force of Infection and Exposure Model***********
## Create an empty array to store the force of infection for all exposure types
foe_pars <- array(0, dim=c(n_distinct(demography$group),max(times),n_distinct(biomarker_map$exposure_id)))
## Specify the force of infection for exposure ID 1 which represents natural infection
foe_pars[,,1] <- 0.02
## Specify the force of vaccination for exposure ID 2 which represents MCV1 vaccination
foe_pars[,,2] <- 0.04
## Specify the force of vaccination for exposure ID 3 which represents MCV2 vaccination
foe_pars[,,3] <- 0.005
## I specified the same value for all time steps within foe_pars for simplicity but we can change to varying numbers to match real world settings.
## Specify a simple exposure model which calculates the probability of exposure directly from the force of infection at that time step
## In this selected model, the probability of exposure is 1-exp(-FOI) where FOI is the force of infection at that time.
exposure_model<-exposure_model_simple_FOE
##********************************1.5: Immunity Model*****************************
## Specify immunity model within serosim function below
immunity_model<-immunity_model_vacc_ifxn_titer_prot
## Specify which exposure IDs represent vaccination events
vacc_exposures<-c(2,3)
## Specify the age at which an individual is eligible for MCV1 and MCV2 vaccination
vacc_age<-c(NA,9,12)
## Specify the maximum number of vaccines an individual can receive for each exposure types; note non vaccine exposures are listed as NAs
## DOUBLE CHECK WITH KEYA ##
max_vacc_events<-c(NA,1,1)
## Plot titer-mediated protection curve given parameters specified within model_pars for biomarker 1 which will be loaded in section 1.6
plot_titer_mediated_protection(0:7500, titer_prot_midpoint=5000, titer_prot_width=.001)
## These are the current parameters used within model_pars_cs1
## Maybe we should start of with simpler versions with high titer-mediated protection and no boosting events?
##****1.6: Antibody Model, Antibody Kinetics Parameters, and draw_parameters*****
## Specify the antibody model
antibody_model<-antibody_model_biphasic
## Bring in the antibody parameters needed for the antibody model
## Note that the titer-mediated protection parameters needed for the immunity model (Section 1.5), the titer-ceiling parameters needed for draw_parameters and the observation error parameter needed for the observation model (Section 1.7) are all defined here too.
## Also note that these are all arbitrary parameter values loosely informed by plausible values.
model_pars_path <- system.file("extdata", "model_pars_keya.csv", package = "serosim")
model_pars <- read.csv(file = model_pars_path, header = TRUE)
model_pars
## Specify the draw_parameters function to use
draw_parameters<-draw_parameters_random_fx_titer_dep
## Plot titer dependent boosting effects given parameters specified within model_pars for biomarker 1 (measles)
plot_titer_dependent_boosting(start=0, end=1500, by=1, titer_ceiling_threshold=1000, titer_ceiling_gradient=0.0009)
##*****************1.7: Observation Model and observation_times*************
## Specify observation model to be used within runserosim
## Specify the limits of detection for each biomarker for the continuous assays (lower detection limit is 8IU/I and the upper is 5000 IU/I)
bounds<-tibble(biomarker_id=c(1,1),name=c("lower_bound","upper_bound"),value=c(8,5000))
## Specify the observation model
observation_model<-observation_model_continuous_bounded_noise
## Specify observation_times (serological survey sampling design) to observe biomarker 1 (aka measles antibody titer) across all individuals at the end of the simulation
observation_times<-tibble(i=1:N,t=max(times), b=1)
##***************************1.9 Run Simulation*************************************
res<- runserosim(
simulation_settings,
demography,
observation_times,
foe_pars,
biomarker_map,
model_pars,
exposure_model,
immunity_model,
antibody_model,
observation_model,
draw_parameters,
## Other arguments needed
bounds=bounds,
max_vacc_events=max_vacc_events,
vacc_exposures=vacc_exposures,
vacc_age=vacc_age,
VERBOSE=TRUE
)
##***************************1.10 Generate Plots************************************
## Plot antibody states and exposure histories for 10 individuals
plot_subset_individuals_history(res$antibody_states, res$exposure_histories_long, subset=5, demography)
## Plot exposure histories for all exposure types
plot_exposure_histories(res$exposure_histories_long)
## Plot exposure probabilities for all exposure types
plot_exposure_prob(res$exposure_probabilities_long)
## Plot antibody states for all individuals
plot_titers(res$antibody_states)
## Plot observed titers
plot_obs_titers_one_sample(res$observed_antibody_states)
## Note that the simulated kinetics parameters are also stored
head(res$kinetics_parameters)
##*****************Generate Data Set with Keya's Format ***************************
##*## Post Simulation Variables
## mom_indicator:  binary indicator of if an individual had mother recall of any mcv dose among children with or without card
## card_indicator: binary indicator of if an individual had record (via card) of any mcv dose
## none_indicator = binary indicator of if an individual had neither card nor recall
## Combine runserosim outputs into a data set for Keya
df<-res$observed_antibody_states %>% select(i,t,observed)
## Plot observed titers
plot_obs_titers_one_sample(res$observed_antibody_states)
res$exposure_probabilities
res$exposure_probabilities[,,1][1,]
res$exposure_probabilities[,,1][2,]
res$exposure_probabilities[,,1][3,]
foe_pars
n_distinct
n_distinct(demography$group)
dim(foe_pars)
foe_pars[1,,]
exposure_model_simple_FOE(1, 1,1,1,foe_pars)
exposure_model_simple_FOE(1, 2,1,1,foe_pars)
exposure_model_simple_FOE(1, 1:120,1,1,foe_pars)
plot(exposure_model_simple_FOE(1, 1:120,1,1,foe_pars))
sum(exposure_model_simple_FOE(1, 1:120,1,1,foe_pars))
## Specify the force of infection for exposure ID 1 which represents natural infection
foe_pars[,,1] <- 0.002
sum(exposure_model_simple_FOE(1, 1:120,1,1,foe_pars))
plot(exposure_model_simple_FOE(1, 1:120,1,1,foe_pars))
##***************************1.4: Force of Infection and Exposure Model***********
## Create an empty array to store the force of infection for all exposure types
foe_pars <- array(0, dim=c(n_distinct(demography$group),max(times),n_distinct(biomarker_map$exposure_id)))
## Specify the force of infection for exposure ID 1 which represents natural infection
foe_pars[,,1] <- 0.002
## Specify the force of vaccination for exposure ID 2 which represents MCV1 vaccination
foe_pars[,,2] <- 0.004
## Specify the force of vaccination for exposure ID 3 which represents MCV2 vaccination
foe_pars[,,3] <- 0.0005
## I specified the same value for all time steps within foe_pars for simplicity but we can change to varying numbers to match real world settings.
## Specify a simple exposure model which calculates the probability of exposure directly from the force of infection at that time step
## In this selected model, the probability of exposure is 1-exp(-FOI) where FOI is the force of infection at that time.
exposure_model<-exposure_model_simple_FOE
##********************************1.5: Immunity Model*****************************
## Specify immunity model within serosim function below
immunity_model<-immunity_model_vacc_ifxn_titer_prot
## Specify which exposure IDs represent vaccination events
vacc_exposures<-c(2,3)
## Specify the age at which an individual is eligible for MCV1 and MCV2 vaccination
vacc_age<-c(NA,9,12)
## Specify the maximum number of vaccines an individual can receive for each exposure types; note non vaccine exposures are listed as NAs
## DOUBLE CHECK WITH KEYA ##
max_vacc_events<-c(NA,1,1)
## Plot titer-mediated protection curve given parameters specified within model_pars for biomarker 1 which will be loaded in section 1.6
plot_titer_mediated_protection(0:7500, titer_prot_midpoint=5000, titer_prot_width=.001)
## These are the current parameters used within model_pars_cs1
## Maybe we should start of with simpler versions with high titer-mediated protection and no boosting events?
##****1.6: Antibody Model, Antibody Kinetics Parameters, and draw_parameters*****
## Specify the antibody model
antibody_model<-antibody_model_biphasic
## Bring in the antibody parameters needed for the antibody model
## Note that the titer-mediated protection parameters needed for the immunity model (Section 1.5), the titer-ceiling parameters needed for draw_parameters and the observation error parameter needed for the observation model (Section 1.7) are all defined here too.
## Also note that these are all arbitrary parameter values loosely informed by plausible values.
model_pars_path <- system.file("extdata", "model_pars_keya.csv", package = "serosim")
model_pars <- read.csv(file = model_pars_path, header = TRUE)
model_pars
## Specify the draw_parameters function to use
draw_parameters<-draw_parameters_random_fx_titer_dep
## Plot titer dependent boosting effects given parameters specified within model_pars for biomarker 1 (measles)
plot_titer_dependent_boosting(start=0, end=1500, by=1, titer_ceiling_threshold=1000, titer_ceiling_gradient=0.0009)
##*****************1.7: Observation Model and observation_times*************
## Specify observation model to be used within runserosim
## Specify the limits of detection for each biomarker for the continuous assays (lower detection limit is 8IU/I and the upper is 5000 IU/I)
bounds<-tibble(biomarker_id=c(1,1),name=c("lower_bound","upper_bound"),value=c(8,5000))
## Specify the observation model
observation_model<-observation_model_continuous_bounded_noise
## Specify observation_times (serological survey sampling design) to observe biomarker 1 (aka measles antibody titer) across all individuals at the end of the simulation
observation_times<-tibble(i=1:N,t=max(times), b=1)
##***************************1.9 Run Simulation*************************************
res<- runserosim(
simulation_settings,
demography,
observation_times,
foe_pars,
biomarker_map,
model_pars,
exposure_model,
immunity_model,
antibody_model,
observation_model,
draw_parameters,
## Other arguments needed
bounds=bounds,
max_vacc_events=max_vacc_events,
vacc_exposures=vacc_exposures,
vacc_age=vacc_age,
VERBOSE=TRUE
)
##***************************1.10 Generate Plots************************************
## Plot antibody states and exposure histories for 10 individuals
plot_subset_individuals_history(res$antibody_states, res$exposure_histories_long, subset=5, demography)
## Plot exposure histories for all exposure types
plot_exposure_histories(res$exposure_histories_long)
## Plot exposure probabilities for all exposure types
plot_exposure_prob(res$exposure_probabilities_long)
## Plot antibody states for all individuals
plot_titers(res$antibody_states)
## Plot observed titers
plot_obs_titers_one_sample(res$observed_antibody_states)
biomarker_map
