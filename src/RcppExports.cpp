// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// antibody_model_monophasic_cpp
double antibody_model_monophasic_cpp(int i, int t1, int b, arma::cube exposure_histories, arma::cube biomarker_states, List kinetics_parameters, DataFrame biomarker_map);
RcppExport SEXP _serosim_antibody_model_monophasic_cpp(SEXP iSEXP, SEXP t1SEXP, SEXP bSEXP, SEXP exposure_historiesSEXP, SEXP biomarker_statesSEXP, SEXP kinetics_parametersSEXP, SEXP biomarker_mapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type exposure_histories(exposure_historiesSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type biomarker_states(biomarker_statesSEXP);
    Rcpp::traits::input_parameter< List >::type kinetics_parameters(kinetics_parametersSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type biomarker_map(biomarker_mapSEXP);
    rcpp_result_gen = Rcpp::wrap(antibody_model_monophasic_cpp(i, t1, b, exposure_histories, biomarker_states, kinetics_parameters, biomarker_map));
    return rcpp_result_gen;
END_RCPP
}
// antibody_model_biphasic_cpp
double antibody_model_biphasic_cpp(int i, int t1, int b, arma::cube exposure_histories, arma::cube biomarker_states, List kinetics_parameters, DataFrame biomarker_map);
RcppExport SEXP _serosim_antibody_model_biphasic_cpp(SEXP iSEXP, SEXP t1SEXP, SEXP bSEXP, SEXP exposure_historiesSEXP, SEXP biomarker_statesSEXP, SEXP kinetics_parametersSEXP, SEXP biomarker_mapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type exposure_histories(exposure_historiesSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type biomarker_states(biomarker_statesSEXP);
    Rcpp::traits::input_parameter< List >::type kinetics_parameters(kinetics_parametersSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type biomarker_map(biomarker_mapSEXP);
    rcpp_result_gen = Rcpp::wrap(antibody_model_biphasic_cpp(i, t1, b, exposure_histories, biomarker_states, kinetics_parameters, biomarker_map));
    return rcpp_result_gen;
END_RCPP
}
// subset_dataframe_integer
arma::vec subset_dataframe_integer(DataFrame mydata, String condition_vector, String return_vector, int condition);
RcppExport SEXP _serosim_subset_dataframe_integer(SEXP mydataSEXP, SEXP condition_vectorSEXP, SEXP return_vectorSEXP, SEXP conditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type mydata(mydataSEXP);
    Rcpp::traits::input_parameter< String >::type condition_vector(condition_vectorSEXP);
    Rcpp::traits::input_parameter< String >::type return_vector(return_vectorSEXP);
    Rcpp::traits::input_parameter< int >::type condition(conditionSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_dataframe_integer(mydata, condition_vector, return_vector, condition));
    return rcpp_result_gen;
END_RCPP
}
// subset_dataframe_numeric_twice
arma::vec subset_dataframe_numeric_twice(DataFrame x, String condition_vector1, String condition_vector2, String return_vector, double condition1, String condition2);
RcppExport SEXP _serosim_subset_dataframe_numeric_twice(SEXP xSEXP, SEXP condition_vector1SEXP, SEXP condition_vector2SEXP, SEXP return_vectorSEXP, SEXP condition1SEXP, SEXP condition2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< String >::type condition_vector1(condition_vector1SEXP);
    Rcpp::traits::input_parameter< String >::type condition_vector2(condition_vector2SEXP);
    Rcpp::traits::input_parameter< String >::type return_vector(return_vectorSEXP);
    Rcpp::traits::input_parameter< double >::type condition1(condition1SEXP);
    Rcpp::traits::input_parameter< String >::type condition2(condition2SEXP);
    rcpp_result_gen = Rcpp::wrap(subset_dataframe_numeric_twice(x, condition_vector1, condition_vector2, return_vector, condition1, condition2));
    return rcpp_result_gen;
END_RCPP
}
// subset_dataframe_numeric
arma::vec subset_dataframe_numeric(DataFrame mydata, String condition_vector, String return_vector, double condition);
RcppExport SEXP _serosim_subset_dataframe_numeric(SEXP mydataSEXP, SEXP condition_vectorSEXP, SEXP return_vectorSEXP, SEXP conditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type mydata(mydataSEXP);
    Rcpp::traits::input_parameter< String >::type condition_vector(condition_vectorSEXP);
    Rcpp::traits::input_parameter< String >::type return_vector(return_vectorSEXP);
    Rcpp::traits::input_parameter< double >::type condition(conditionSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_dataframe_numeric(mydata, condition_vector, return_vector, condition));
    return rcpp_result_gen;
END_RCPP
}
// subset_dataframe_char
arma::vec subset_dataframe_char(DataFrame mydata, String condition_vector, String return_vector, String condition);
RcppExport SEXP _serosim_subset_dataframe_char(SEXP mydataSEXP, SEXP condition_vectorSEXP, SEXP return_vectorSEXP, SEXP conditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type mydata(mydataSEXP);
    Rcpp::traits::input_parameter< String >::type condition_vector(condition_vectorSEXP);
    Rcpp::traits::input_parameter< String >::type return_vector(return_vectorSEXP);
    Rcpp::traits::input_parameter< String >::type condition(conditionSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_dataframe_char(mydata, condition_vector, return_vector, condition));
    return rcpp_result_gen;
END_RCPP
}
// get_cube_slices
arma::cube get_cube_slices(arma::cube x, arma::vec indices);
RcppExport SEXP _serosim_get_cube_slices(SEXP xSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cube_slices(x, indices));
    return rcpp_result_gen;
END_RCPP
}
// get_mat_cols
arma::mat get_mat_cols(arma::mat x, arma::vec indices);
RcppExport SEXP _serosim_get_mat_cols(SEXP xSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mat_cols(x, indices));
    return rcpp_result_gen;
END_RCPP
}
// sum_arma_na_rm
double sum_arma_na_rm(arma::mat& X);
RcppExport SEXP _serosim_sum_arma_na_rm(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_arma_na_rm(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_serosim_antibody_model_monophasic_cpp", (DL_FUNC) &_serosim_antibody_model_monophasic_cpp, 7},
    {"_serosim_antibody_model_biphasic_cpp", (DL_FUNC) &_serosim_antibody_model_biphasic_cpp, 7},
    {"_serosim_subset_dataframe_integer", (DL_FUNC) &_serosim_subset_dataframe_integer, 4},
    {"_serosim_subset_dataframe_numeric_twice", (DL_FUNC) &_serosim_subset_dataframe_numeric_twice, 6},
    {"_serosim_subset_dataframe_numeric", (DL_FUNC) &_serosim_subset_dataframe_numeric, 4},
    {"_serosim_subset_dataframe_char", (DL_FUNC) &_serosim_subset_dataframe_char, 4},
    {"_serosim_get_cube_slices", (DL_FUNC) &_serosim_get_cube_slices, 2},
    {"_serosim_get_mat_cols", (DL_FUNC) &_serosim_get_mat_cols, 2},
    {"_serosim_sum_arma_na_rm", (DL_FUNC) &_serosim_sum_arma_na_rm, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_serosim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
