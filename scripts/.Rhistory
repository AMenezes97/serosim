dat_to_save <- dat_to_save %>% mutate(Symp_Ever = ifelse(is.na(Symp_Ever),"Unknown",Symp_Ever))
dat_to_save <- dat_to_save %>% group_by(PersonID, CumulativeExposureNumber) %>% fill(Symp_Init, .direction="down") %>%
fill(Symp_Ever, .direction="down") %>%
fill(Symp_OnsetDate, .direction="down")
## Titer management
## Set <13 to 0 and >800 to 800
dat_to_save <- dat_to_save %>% mutate(Titer = ifelse(Titer < 13, 13, Titer))
dat_to_save <- dat_to_save %>% mutate(Titer = ifelse(Titer > 800, 800, Titer))
dat_to_save <- dat_to_save %>% mutate(log_titer = log(Titer))
## How long since previous exposure?
## 4-week exposure groups
dat_to_save <- dat_to_save %>% mutate(time_group=cut(DaysSincePreviousExposure,breaks=seq(0,600,by=28)))
dat_to_save <- dat_to_save %>% left_join(dat_to_save %>%
group_by(PersonID, CumulativeExposureNumber) %>%
mutate(tmp_i = 1:n()) %>%
filter(tmp_i == 1) %>%
select(PersonID, CumulativeExposureNumber, DaysSincePreviousExposure) %>%
rename(DaysSinceExposureUse=DaysSincePreviousExposure))
## Days since previous exposure groups
dat_to_save <- dat_to_save %>% mutate(DaysSinceExposureGroup = ifelse(DaysSinceExposureUse > 12*7, ">3 months",
ifelse(DaysSinceExposureUse > 4*7, "1-3 months","<1 month")))
dat_to_save <- dat_to_save %>% mutate(DaysSinceExposureGroup = ifelse(is.na(DaysSinceExposureGroup),"Naive", DaysSinceExposureGroup))
dat_to_save$DaysSinceExposureGroup <- factor(dat_to_save$DaysSinceExposureGroup, levels=c("Naive",">3 months","1-3 months","<1 month"))
## Negative, low, medium and high titer groups
dat_to_save <- dat_to_save %>% mutate(TiterGroup=cut(Titer, breaks=c(-1,125,high_threshold,1000)))
dat_to_save <- dat_to_save %>% mutate(TiterGroupAlt=cut(Titer, breaks=c(-1,13,400,799,1000)))
## Mark when titer was actually measured
dat_to_save <- dat_to_save %>% mutate(TiterMeasured = !is.na(Titer))
## Add titer date to date titer was measured. Then, for each individual, carry this date downward. Note we'll have some individuals with multiple titers
dat_to_save <- dat_to_save %>% mutate(TiterDate = ifelse(TiterMeasured == 1, as.Date(TestDate), NA)) %>%
group_by(PersonID) %>% fill(TiterDate,.direction="down")
## Create flag for sensitivity analysis using only individuals with a titer measurement 100-200 days since a previous exposure
tmp_ids <- dat_to_save %>% filter(TiterDate == TestDate) %>% select(PersonID, DaysSinceExposure) %>%
distinct() %>% filter(DaysSinceExposure >= 100, DaysSinceExposure <= 200) %>%
select(-DaysSinceExposure) %>%
mutate(TiterSensitivity = TRUE) %>%
distinct()
dat_to_save <- dat_to_save %>% left_join(tmp_ids) %>% mutate(TiterSensitivity = ifelse(is.na(TiterSensitivity),FALSE, TiterSensitivity))
dat_to_save <- dat_to_save %>% group_by(PersonID) %>% fill(Titer,.direction="downup") %>% fill(log_titer,.direction="downup") %>%
fill(Titer,.direction="downup") %>%
fill(TiterGroup,.direction="downup") %>%
fill(TiterGroupAlt,.direction="downup")
## Assign individuals to boost and titer group interaction
## If titer is measured before the booster, boosted, and titer is lower than the threshold, then low-boosted
## If titer is measured before the booster, boosted, and titer is higher than the threshold, then high-boosted
## If not boosted and titer is lower than the threshold, then low-notboosted
## If not boosted and titer is higher than the threshold, then high-notboosted
dat_to_save <- dat_to_save %>%
mutate(BoostTiterGroup = ifelse(TiterDate < BoosterDate & VaccStatus == "Boosted" & !is.na(Titer) & Titer <= high_threshold, "LowBoosted", NA)) %>%
mutate(BoostTiterGroup = ifelse(TiterDate < BoosterDate & VaccStatus == "Boosted" & !is.na(Titer) & Titer > high_threshold, "HighBoosted", BoostTiterGroup)) %>%
mutate(BoostTiterGroup = ifelse(VaccStatus != "Boosted" & !is.na(Titer) & Titer <= high_threshold, "LowNotBoosted", BoostTiterGroup)) %>%
mutate(BoostTiterGroup = ifelse(VaccStatus != "Boosted" & !is.na(Titer) & Titer > high_threshold, "HighNotBoosted", BoostTiterGroup))
## Create altnerative group with higher titer threshold
## Assign individuals to boost and titer group interaction, alternative titer grouping
high_threshold2 <- 400
dat_to_save <- dat_to_save %>%
mutate(BoostTiterGroupAlt = ifelse(TiterDate < BoosterDate & VaccStatus == "Boosted" & !is.na(Titer) & Titer <= high_threshold2, "LowBoostedAlt", NA)) %>%
mutate(BoostTiterGroupAlt = ifelse(TiterDate < BoosterDate & VaccStatus == "Boosted" & !is.na(Titer) & Titer > high_threshold2, "HighBoostedAlt", BoostTiterGroupAlt)) %>%
mutate(BoostTiterGroupAlt = ifelse(VaccStatus != "Boosted" & !is.na(Titer) & Titer <= high_threshold2, "LowNotBoostedAlt", BoostTiterGroupAlt)) %>%
mutate(BoostTiterGroupAlt = ifelse(VaccStatus != "Boosted" & !is.na(Titer) & Titer > high_threshold2, "HighNotBoostedAlt", BoostTiterGroupAlt))
## Record last titer for each individual and find 60 and 90 days post draw
dat_titer_draws <- dat_to_save %>% filter(TiterMeasured == 1) %>%
mutate(TiterDraw=TestDate,TiterDraw60=TiterDraw+60,TiterDraw90=TiterDraw+90) %>%
select(PersonID, TiterDraw,TiterDraw60,TiterDraw90,CumulativeInfectionNumber) %>% distinct()
## Mark these infections
dat_titer_markers <- dat_to_save %>% left_join(dat_titer_draws) %>%
fill(TiterDraw,.direction="downup") %>%  fill(TiterDraw60,.direction="downup") %>% fill(TiterDraw90,.direction="downup") %>%
filter(NewInfectionIdentified==1) %>%
group_by(PersonID) %>%
mutate(UseLessThan60 = TestDate > TiterDraw & TestDate <= TiterDraw60,
UseLessThan90 = TestDate > TiterDraw & TestDate <= TiterDraw90,
Use60to90 = TestDate >= TiterDraw60 & TestDate <= TiterDraw90) %>%
select(PersonID, CumulativeInfectionNumber, UseLessThan60, UseLessThan90, Use60to90) %>%
mutate(UseLessThan60 = ifelse(is.na(UseLessThan60),FALSE,UseLessThan60),
UseLessThan90 = ifelse(is.na(UseLessThan90),FALSE,UseLessThan90),
Use60to90 = ifelse(is.na(Use60to90),FALSE,Use60to90))%>%
distinct()
dat_to_save <- dat_to_save %>% left_join(dat_titer_markers)
if(reduce_data){
dat_to_save_irb <- dat_to_save %>%
filter(CumulativeInfectionNumber > 0) %>%
group_by(PersonID,CumulativeInfectionNumber) %>%
mutate(MinDate = min(TestDate,na.rm=TRUE)) %>%
mutate(TestDate=as.numeric(TestDate-MinDate),
PeakDate = as.numeric(PeakDate-MinDate),
MostRecentDetection=as.numeric(MostRecentDetection-MinDate),
LastNegative = as.numeric(LastNegative - MinDate),
MostRecentExposure = as.numeric(MostRecentExposure - MinDate),
BoosterDate = as.numeric(BoosterDate - MinDate),
VaccineDose2Date = as.numeric(VaccineDose2Date - MinDate),
VaccineDose1Date = as.numeric(VaccineDose1Date - MinDate),
Symp_OnsetDate = as.numeric(Symp_OnsetDate - MinDate)
) %>%
filter(DaysSinceDetection <= 50) %>%
select(-c(IQVIAID, MinDate,RecentlyPositive,IQVIA_detection,AcuteInfection1,AcuteInfectionSK,NewExposure,
MostRecentDetection,PeakDate,Role,Age,MostRecentExposure,BoosterDate,TiterDate,DaysSincePreviousExposure,
DaysSinceExposure,NVaccinations,VaccineDose1Date,VaccineDose2Date
))
} else {
min_dates <- dat_to_save  %>% ungroup() %>% select(PersonID) %>% distinct() %>% group_by(PersonID) %>% mutate(Shift=floor(runif(n(), 0,100)))
dat_to_save_irb <- dat_to_save %>% left_join(min_dates) %>%
group_by(PersonID) %>%
mutate(TestDate=as.numeric(TestDate+Shift),
PeakDate = as.numeric(PeakDate+Shift),
MostRecentDetection=as.numeric(MostRecentDetection+Shift),
LastNegative = as.numeric(LastNegative + Shift),
MostRecentExposure = as.numeric(MostRecentExposure + Shift),
BoosterDate = as.numeric(BoosterDate + Shift),
VaccineDose2Date = as.numeric(VaccineDose2Date + Shift),
VaccineDose1Date = as.numeric(VaccineDose1Date + Shift),
Symp_OnsetDate = as.numeric(Symp_OnsetDate + Shift)
) %>%
select(-c(IQVIAID, RecentlyPositive,IQVIA_detection,AcuteInfection1,AcuteInfectionSK,Shift))
}
ct_dat_repeats <- ct_dat_repeats %>%
select(PersonID, TestResult, CtT1, CtT2, tests_on_day)
repeats_to_save_irb <- ct_dat_repeats
if(reduce_data){
save(dat_to_save,file = paste0(save_wd,"data/ct_dat_subset_20220617.RData"))
write_csv(dat_to_save, file=paste0(save_wd,"data/ct_dat_subset_20220617.csv"))
save(dat_to_save_irb,file = paste0(save_wd,"data/ct_data_cleaned.RData"))
write_csv(dat_to_save_irb, file=paste0(save_wd,"data/ct_data_cleaned.csv"))
save(ct_dat_repeats,file = paste0(save_wd,"data/ct_dat_repeats_20220617.RData"))
write_csv(ct_dat_repeats, file=paste0(save_wd,"data/ct_dat_repeats_20220617.csv"))
save(repeats_to_save_irb,file = paste0(save_wd,"data/ct_data_cleaned_repeats.RData"))
write_csv(repeats_to_save_irb, file=paste0(save_wd,"data/ct_data_cleaned_repeats.csv"))
} else {
save(dat_to_save, file=paste0(save_wd,"data/ct_dat_long_not_irb.RData"))
save(dat_to_save_irb, file=paste0(save_wd,"data/ct_data_long.RData"))
}
## Some more plots
## Mark when titer was actually measured
dat_to_save <- dat_to_save %>% mutate(TiterMeasured = !is.na(Titer))
## Add titer date to date titer was measured. Then, for each individual, carry this date downward. Note we'll have some individuals with multiple titers
dat_to_save <- dat_to_save %>% mutate(TiterDate = ifelse(TiterMeasured == 1, as.Date(TestDate), NA)) %>%
group_by(PersonID) %>% fill(TiterDate,.direction="down")
dat_to_save$TiterDate <- as.Date(dat_to_save$TiterDate,origin="1970-01-01")
p_statuses <- plot_vacc_status_with_infections(dat_to_save,date_min="2021-06-25")
## Save plots
if(!reduce_data) {
ggsave(filename=paste0(save_wd,"figures/supplement/p_test_results.png"), p_test_results,width=10,height=10,dpi=300,units='in')
ggsave(filename=paste0(save_wd,"figures/supplement/p_test_cts.png"), p_test_cts,width=10,height=10,dpi=300,units='in')
ggsave(filename=paste0(save_wd,"figures/supplement/p_vacc.png"), p_vacc,width=10,height=10,dpi=300,units='in')
ggsave(filename=paste0(save_wd,"figures/supplement/p_statuses_vaccine.png"), p_statuses[[1]],width=10,height=10,dpi=300,units='in')
ggsave(filename=paste0(save_wd,"figures/supplement/p_statuses_exposures_all.png"), p_statuses[[2]],width=10,height=10,dpi=300,units='in')
ggsave(filename=paste0(save_wd,"figures/supplement/p_statuses.png"), p_statuses[[4]],width=10,height=14,dpi=300,units='in')
ggsave(filename=paste0(save_wd,"figures/supplement/p_statuses_exposures_strat.png"), p_statuses[[3]],width=14,height=10,dpi=300,units='in')
# Lots of Ct trajectory plots ---------------------------------------------
## We now need to decide which categorization we use to determine an exposure event -- probably the "InInfHist" column
## Start of acute infections based on Ct1 only -- how many differences?
sink(paste0(save_wd, "figures/supplement/data_summaries.txt"))
print("Number of infections by AcuteInfection1 but not in infection history: ")
ct_dat1 %>% filter(AcuteInfection1 == TRUE & InInfHist == FALSE) %>% distinct()%>% nrow()
## Start of acute infections based on Ct1 or Ct2 -- how many differences?
print("Number of infections by AcuteInfection2 only but not in infection history: ")
ct_dat1 %>% filter(AcuteInfection2 == TRUE & AcuteInfection1 == FALSE & InInfHist == FALSE) %>% distinct()%>% nrow()
## New detections based on Ct1 only -- how many differences?
print("Number of detections by Ct1 only but not in infection history: ")
ct_dat1 %>% filter(Detected1 == TRUE & InInfHist == FALSE) %>% distinct()%>% nrow()
## New detections based on Ct1 or Ct2 -- how many differences?
print("Number of detections by Ct2 only but not in infection history: ")
ct_dat1 %>% filter(Detected2 == TRUE & Detected1 == FALSE & InInfHist == FALSE)%>% distinct() %>% nrow()
## How many infections based on either?
print("Number of infections by AcuteInfection1: ")
ct_dat1 %>% filter(AcuteInfection1 == TRUE) %>% distinct() %>% nrow()
print("Number of infections by AcuteInfection2: ")
ct_dat1 %>% filter(AcuteInfection2 == TRUE) %>% distinct()%>% nrow()
print("Number of infections by AcuteInfectionSK: ")
ct_dat1 %>% filter(AcuteInfectionSK == TRUE) %>% distinct()%>% nrow()
print("Number of detections by Ct1: ")
ct_dat1 %>% filter(Detected1 == TRUE) %>% distinct()%>% nrow()
print("Number of detections by Ct2: ")
ct_dat1 %>% filter(Detected2 == TRUE) %>% distinct()%>% nrow()
print("Number of entries in the infection history: ")
ct_dat1 %>% filter(InInfHist == TRUE) %>% distinct()%>% nrow()
print("Number of externally confirmed infections: ")
ct_dat1 %>% filter(ExternalConfirmed == TRUE) %>% distinct() %>% nrow()
print("Number of virologically confirmed infections in infection history: ")
ct_dat1 %>% filter(InInfHist == TRUE & (ExternalAntibody == FALSE & ExternalUnconfirmed==FALSE)) %>% distinct() %>% nrow()
print("Number of virologically confirmed infections in infection history with a recorded PCR result: ")
ct_dat %>% filter(InInfHist == TRUE & (ExternalDetection==FALSE)) %>% distinct() %>% nrow()
## Detected AcuteInfection1 not in InInfHist
#ct_dat1 %>% filter(AcuteInfection1 == TRUE & InInfHist == FALSE) %>% View()
#ct_dat1 %>% filter(AcuteInfection2 == TRUE & InInfHist == FALSE) %>% View()
print("Number of infections by lineage, using IQVIA detection: ")
ct_dat1 %>% filter(IQVIA_detection==TRUE) %>% group_by(LineageBroad) %>% tally() %>% print()
print("Number of infections by lineage, using AcuteInfection1: ")
ct_dat1 %>% filter(AcuteInfection1==TRUE) %>% group_by(LineageBroad) %>% tally() %>% print()
print("Number of infections by lineage, using AcuteInfection2: ")
ct_dat1 %>% filter(AcuteInfection2==TRUE) %>% group_by(LineageBroad) %>% tally() %>% print()
print("Number of infections by lineage, using AcuteInfectionSK: ")
ct_dat1 %>% filter(AcuteInfectionSK==TRUE) %>% group_by(LineageBroad) %>% tally() %>% print()
print("Number of individuals with >1 infection using AcuteInfectionSK: ")
ct_dat1 %>% filter(AcuteInfectionSK==TRUE) %>% group_by(PersonID) %>% tally() %>% filter(n > 1) %>% nrow()
sink()
check_dist <- 14
## Show AcuteInfection1 which are not in InInfHist and do not have an InInfHist detection within 14 days either side
ct_dat_tmp_ai1 <- ct_dat %>% ungroup() %>% mutate(row_id = 1:n())
x_ai1 <- ct_dat_tmp_ai1 %>% filter(AcuteInfection1 == TRUE & InInfHist == FALSE)%>%
select(IQVIAID, FirstPosPCR, TestDate, TestResult, CtT1, CtT2, Lineage, row_id) %>%
distinct() %>%
mutate(first_pos_lag = FirstPosPCR - TestDate)
unique_row_id <- unique(x_ai1$row_id)
unique_row_id <- c(sapply(unique_row_id, function(x) seq(x-check_dist, x+check_dist,by=1)))
x_ai1 <- ct_dat_tmp_ai1 %>% filter(row_id %in% unique_row_id)
to_view_ai1 <- x_ai1 %>% select(IQVIAID, TestDate, FirstPosPCR, TestResult, CtT1, CtT2, Lineage, InInfHist, AcuteInfection1) %>%
mutate(first_pos_lag = FirstPosPCR - TestDate)
View(to_view_ai1)
x_ai1 %>% group_by(IQVIAID) %>% filter(!any(InInfHist)) %>% select(IQVIAID, TestDate, FirstPosPCR, TestResult, CtT1, CtT2, InInfHist, AcuteInfection1) %>% View
## All
x_ai1 %>% group_by(IQVIAID) %>% filter(!any(InInfHist)) %>% select(IQVIAID) %>% distinct()
write_csv(to_view_ai1,paste0(save_wd, "/acuteinfection1_not_in_infhist.csv"))
## Show AcuteInfection2 which are not in InInfHist and do not have an InInfHist detection within 14 days either side
ct_dat_tmp_ai2 <- ct_dat %>% ungroup() %>% mutate(row_id = 1:n())
x_ai2 <- ct_dat_tmp_ai2 %>% filter(AcuteInfection2 == TRUE & AcuteInfection1 == FALSE & InInfHist == FALSE)%>%
select(IQVIAID, FirstPosPCR, TestDate, TestResult, CtT1, CtT2, Lineage, row_id) %>%
distinct() %>%
mutate(first_pos_lag = FirstPosPCR - TestDate)
unique_row_id <- unique(x_ai2$row_id)
unique_row_id <- c(sapply(unique_row_id, function(x) seq(x-check_dist, x+check_dist,by=1)))
x_ai2 <- ct_dat_tmp_ai2 %>% filter(row_id %in% unique_row_id)
to_view_ai2 <- x_ai2 %>% select(IQVIAID, TestDate, FirstPosPCR, TestResult, CtT1, CtT2, Lineage, InInfHist, AcuteInfection2) %>%
mutate(first_pos_lag = FirstPosPCR - TestDate)
View(to_view_ai2)
x_ai2 %>% group_by(IQVIAID) %>% filter(!any(InInfHist))%>% select(IQVIAID, TestDate, FirstPosPCR, TestResult, CtT1, CtT2, InInfHist, AcuteInfection2) %>% View
x_ai2 %>% group_by(IQVIAID) %>% filter(!any(InInfHist)) %>% select(IQVIAID) %>% distinct()
write_csv(to_view_ai2,paste0(save_wd, "/acuteinfection2_not_in_infhist.csv"))
pdf(paste0(save_wd,"figures/supplement/p_all_ct_plots.pdf"))
ggplot(ct_dat1 %>% filter(TimeRelToPeak >= -10, TimeRelToPeak < 20, CtT1 > 0)) +
geom_line(aes(x=TimeRelToPeak,y=CtT1,group=interaction(PersonID, CumulativeInfectionNumber)),alpha=0.1) +
geom_smooth(aes(x=TimeRelToPeak,y=CtT1)) +
scale_y_continuous(trans='reverse') +
ggtitle("All Cts over time relative to peak")
ggplot(ct_dat1 %>% filter(TimeRelToPeak >= -10, TimeRelToPeak < 20, CtT1 > 0) %>%
mutate(detectable = CtT1 < 40) %>% group_by(TimeRelToPeak) %>%
summarize(n_detectable=sum(detectable),N=n()) %>%
group_by(TimeRelToPeak) %>%
mutate(prop=n_detectable/N,
upper_binom=prop.test(n_detectable, N)$conf.int[2],
lower_binom=prop.test(n_detectable, N)$conf.int[1])) +
geom_ribbon(aes(x=TimeRelToPeak,ymin=lower_binom,ymax=upper_binom),alpha=0.25) +
geom_line(aes(x=TimeRelToPeak,y=prop))+
scale_y_continuous(limits=c(0,1))  +
ggtitle("Proportion detectable over time relative to peak")
ggplot(ct_dat1 %>% filter(DaysSinceDetection >= -10, DaysSinceDetection < 20, CtT1 > 0) %>%
mutate(detectable = CtT1 < 40) %>% group_by(DaysSinceDetection) %>%
summarize(n_detectable=sum(detectable),N=n()) %>%
group_by(DaysSinceDetection) %>%
mutate(prop=n_detectable/N,
upper_binom=prop.test(n_detectable, N)$conf.int[2],
lower_binom=prop.test(n_detectable, N)$conf.int[1])) +
geom_ribbon(aes(x=DaysSinceDetection,ymin=lower_binom,ymax=upper_binom),alpha=0.25) +
geom_line(aes(x=DaysSinceDetection,y=prop)) +
scale_y_continuous(limits=c(0,1)) +
ggtitle("Proportion detectable over time since detection")
ggplot(ct_dat1 %>% filter(TimeRelToPeak >= -10, TimeRelToPeak < 20, CtT1 > 0)) +
geom_line(aes(x=TimeRelToPeak,y=CtT1,group=interaction(PersonID, CumulativeInfectionNumber)),alpha=0.1) +
geom_smooth(aes(x=TimeRelToPeak,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_wrap(~LineageBroad)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time relative to peak by variant")
ggplot(ct_dat1 %>% filter(DaysSinceDetection >= -10, DaysSinceDetection < 20, CtT1 > 0)) +
geom_line(aes(x=DaysSinceDetection,y=CtT1,group=interaction(PersonID, CumulativeInfectionNumber)),alpha=0.1) +
geom_smooth(aes(x=DaysSinceDetection,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_wrap(~LineageBroad)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time since detection by variant")
ggplot(ct_dat1 %>% filter(TimeRelToPeak >= -10, TimeRelToPeak < 20, CtT1 > 0)) +
geom_line(aes(x=TimeRelToPeak,y=CtT1,group=PersonID),alpha=0.1) +
geom_smooth(aes(x=TimeRelToPeak,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_grid(LineageBroad~CumulativeInfectionNumber)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time relative to peak by variant and number of prior infections")
ggplot(ct_dat1 %>% filter(TimeRelToPeak >= -10, TimeRelToPeak < 20, CtT1 > 0)) +
geom_line(aes(x=TimeRelToPeak,y=CtT1,group=PersonID),alpha=0.1) +
geom_smooth(aes(x=TimeRelToPeak,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_wrap(~CumulativeInfectionNumber)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time relative to peak by number of prior infections")
ggplot(ct_dat1 %>% filter(TimeRelToPeak >= -10, TimeRelToPeak < 20, CtT1 > 0)) +
geom_line(aes(x=TimeRelToPeak,y=CtT1,group=PersonID),alpha=0.1) +
geom_smooth(aes(x=TimeRelToPeak,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_wrap(~CumulativeExposureNumber)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time relative to peak by number of prior exposures")
ggplot(ct_dat1 %>% filter(DaysSinceDetection >= -10, DaysSinceDetection < 20, CtT1 > 0)) +
geom_line(aes(x=DaysSinceDetection,y=CtT1,group=PersonID),alpha=0.1) +
geom_smooth(aes(x=DaysSinceDetection,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_grid(LineageBroad~CumulativeInfectionNumber)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time since detection by variant and number of prior infections")
ggplot(ct_dat1 %>% filter(DaysSinceDetection >= -10, DaysSinceDetection < 20, CtT1 > 0)) +
geom_line(aes(x=DaysSinceDetection,y=CtT1,group=PersonID),alpha=0.1) +
geom_smooth(aes(x=DaysSinceDetection,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_wrap(~CumulativeInfectionNumber)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time since detection by number of prior infections")
ggplot(ct_dat1 %>% filter(DaysSinceDetection >= -10, DaysSinceDetection < 20, CtT1 > 0)) +
geom_line(aes(x=DaysSinceDetection,y=CtT1,group=PersonID),alpha=0.1) +
geom_smooth(aes(x=DaysSinceDetection,y=CtT1)) +
scale_y_continuous(trans='reverse') + facet_wrap(~CumulativeExposureNumber)+
coord_cartesian(ylim=c(40,10))+
ggtitle("All Cts over time since detection by number of prior exposures")
dev.off()
}
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/prep_data_for_regressions.R')
p_titers1
dat
colnames(dat)
dat %>% filter(TiterMeasured == 1)
dat_titer_tmp
# Clean data --------------------------------------------------------------
## Read in cleaned data
dat <- read_csv("data/ct_data_cleaned.csv")
head(dat)
dat %>% filter(TiterMeasured == 1)
dat %>% filter(NewInfectionIdentified == 1)
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/raw_data.R')
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/raw_data.R')
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/raw_data.R')
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/raw_data.R')
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/raw_data.R')
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/raw_data.R')
load("/Users/james/Documents/GitHub/SC2-kinetics-immune-history/data/data_for_regressions.RData")
dat_subset_use
dat_subset_use %>% View
ct_dat <- read_csv("data/ct_data_cleaned.csv")
ct_dat_repeats <- read_csv("data/ct_data_cleaned_repeats.csv")
ids <- ct_dat %>% select(PersonID) %>% distinct() %>% pull(PersonID)
ids_shuffled <- sample(ids)
new_ids <- tibble(PersonID=ids, PersonIDShuffled=ids_shuffled)
ct_dat <- ct_dat %>% left_join(new_ids) %>% select(-PersonID) %>% rename(PersonID=PersonIDShuffled)
ct_dat_repeats <- ct_dat_repeats %>% left_join(new_ids) %>% select(-PersonID) %>% rename(PersonID=PersonIDShuffled)
write_csv(ct_dat, "data/ct_data_cleaned.csv")
write_csv(ct_dat, "data/ct_data_cleaned_repeats.csv")
getwd()
source('~/.active-rstudio-document')
source('~/Documents/GitHub/SC2-kinetics-immune-history/scripts/prep_data_for_regressions.R')
head(dat)
dat$PersonID
new_ids
View(dat)
source('~/Documents/GitHub/ct_nba/scripts/age_explore.R', echo=TRUE)
source('~/Documents/GitHub/ct_nba/scripts/age_explore.R', echo=TRUE)
source('~/Documents/GitHub/ct_nba/scripts/age_explore.R', echo=TRUE)
source('~/Documents/GitHub/ct_nba/scripts/age_explore.R', echo=TRUE)
dfcount2test <- data.frame(c(155,290),c(2,2))
colnames(dfcount2test) <- c("X1","X10")
dfcount2test <- data.frame(sapply(dfcount2test, as.numeric))
print(dfcount2test)
dfwell <- dfcount2test %>% rowwise() %>% mutate(
test_stat = chisq.test(data.frame(c(X1, X10),c(291-X1,2-X10)))$statistic
)
##Coding question for James
library(tidyverse)
dfcount2test <- data.frame(c(155,290),c(2,2))
colnames(dfcount2test) <- c("X1","X10")
dfcount2test <- data.frame(sapply(dfcount2test, as.numeric))
print(dfcount2test)
dfwell <- dfcount2test %>% rowwise() %>% mutate(
test_stat = chisq.test(data.frame(c(X1, X10),c(291-X1,2-X10)))$statistic
)
print(dfwell)
dfwell2 <- dfcount2test %>% rowwise() %>% mutate(
test_stat = chisq.test(data.frame(c(dfcount2test[,1], dfcount2test[,2]),c(291-dfcount2test[,1],2-dfcount2test[,2])))$statistic
)
?chisq.test
data.frame(c(155,2,291-155,2-2))
data.frame(c(155,2),c(291-155,2-2))
dfwell2 <- dfcount2test %>% rowwise() %>% mutate(
test_stat = chisq.test(data.frame(c(dfcount2test[,1], dfcount2test[,2]),c(291-dfcount2test[,1],2-dfcount2test[,2])))$statistic
)
print(dfwell2)
dfcount2test
dfcount2test[,1]
dfcount2test
dfwell2 <- dfcount2test %>% rowwise() %>% mutate(
test_stat = chisq.test(data.frame(c(X1, X2),c(291-X1,2-X2)))$statistic
)
dfwell2 <- dfcount2test %>% rowwise() %>% mutate(
test_stat = chisq.test(data.frame(c(X1, X10),c(291-X1,2-X10)))$statistic
)
print(dfwell2)
#dfssss2 <- data.frame(c(dfcount2test[,1], dfcount2test[,2]),c(291-dfcount2test[,1],2-dfcount2test[,2]))
use_indices <- colnames(dfcount2test)
#dfssss2 <- data.frame(c(dfcount2test[,1], dfcount2test[,2]),c(291-dfcount2test[,1],2-dfcount2test[,2]))
use_colnames <- colnames(dfcount2test)
dfwell2 <- dfcount2test %>% rowwise() %>% mutate(
test_stat = chisq.test(data.frame(c(use_colnames[1], use_colnames[2]),c(291-use_colnames[1],2-use_colnames[2])))$statistic
)
use_colnames[1]
##Source the following:
source("~/Documents/GitHub/serosim/R/serosim.R")
getwd()
##Source the following:
source("~/Documents/GitHub/serosim/R/serosim.R")
##Source the following:
setwd(getwd())
setwd("..")
devtools::load_all()
getwd()
list.files()
setwd("~/Documents/GitHub/serosim/scripts")
##Source the following:
setwd(dirname(getActiveDocumentContext()$path))
##Source the following:
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
devtools::load_all()
library(tidyverse)
library(data.table)
library(ggplot2)
##******************Component 1: Simulation Settings****************************
## Specify the number of time periods to simulate
times <- seq(1,120,by=1)
## Set simulation settings
simulation_settings <- list("t_start"=1,"t_end"=max(times))
##******************Component 2: Population Demography**************************
## Specify the number of individuals in the simulation
N <- 100
## Pre load the demography categories, values and distributions
aux <- list("SES"=list("name"="SES","options"=c("low","medium","high"), "distribution"=c(0.2,0.2,0.6)),
"NS"=list("name"="NS","options"=c("low","high"),"distribution"=c(0.5,0.5)),
"Sex"=list("name"="sex","options"=c("male", "female"), "distribution"=c(0.5,0.5)),
"Group"=list("name"="group","options"=c("1", "2", "3", "4"), "distribution"=c(0.25,0.25,0.25,0.25)) )
## Simulate demography settings
demography <- generate_pop_demography(N, times, limit=0, removal_min=0, removal_max=120, prob_removal=0.3, aux=aux)
##*****************Component 3: Force of Infection and Exposure Model***********
## Specify the number of exposures (eventually, this won't be needed because the serosim function can extract this from the antigen_map)
N_exposure_ids <- 2
## Specify the force of infection array (different format)
group<-c(1,2,3,4)
lambdas <- array(rep(0.5,length(group)), dim=c(length(group),max(times),N_exposure_ids))
##***********************Component 4: Antigen Map*******************************
## Specify which antigens are present in each exposure type
antigen_map <- tibble(exposure_id=c(1,1,2),antigen_id=c(1,2,1))
## Specify which exposure IDs represent vaccination events
vacc_exposures<-1
## Specify the maximum number of vaccines an individual can receive for each exposure types; note non vaccine exposures are listed as NAs
max_vacc_events<-1
## Specify antibody kinetics parameters
theta <- read.csv("Documents/GitHub/serosim/inst/extdata/theta_test_1.csv")
## Specify antibody kinetics parameters
theta <- read.csv("~/Documents/GitHub/serosim/inst/extdata/theta_test_1.csv")
## Limits of detection for continuous assays
boundary<-c(2,20)
## Set observation settings
obs1 <- tibble(i=1:N,t=60, ag=1)
obs2 <- tibble(i=1:N,t=60, ag=2)
obs3 <- tibble(i=1:N,t=120, ag=1)
obs4 <- tibble(i=1:N,t=120, ag=2)
observation_times<-rbind(obs1,obs2,obs3,obs4)
##***************************Run Simulation*************************************
# Rprof(tmp<-tempfile())
## Test full function with generated inputs
res<- runserosim(
simulation_settings,
demography,
observation_times,
lambdas,
antigen_map,
theta,
exposure_model=exposure_model_simple_FOI,
immunity_model=immunity_model_vacc_ifxn_titer_prot,
antibody_model=antibody_model_biphasic,
observation_model=observation_model_continuous_bounded_noise,
draw_parameters=draw_parameters_random_fx_titer_dep,
## Pre-specified parameters/events
exposure_histories_fixed=NULL,
## Other arguments needed
boundary=boundary,
max_vacc_events=max_vacc_events,
vacc_exposures=vacc_exposures
)
runserosim
res
# # ## Generate Plots
# ggplot(res$antibody_states) + geom_tile(aes(x=t,y=i,fill=value)) + facet_wrap(~ag)
plot_titers(res$antibody_states)
# ggplot(res$exposure_probabilities_long) + geom_tile(aes(x=t,y=i,fill=value)) + facet_wrap(~e)
plot_exposure_prob(res$exposure_probabilities_long)
# ggplot(res$observed_antibody_states) + geom_jitter(aes(x=t,y=observed),height=0.1,width=0.25) + facet_wrap(~ag) + scale_x_continuous(limits=range(times))
plot_obs_titers_one_sample(res$observed_antibody_states)
plot_obs_titers_paired_sample(res$observed_antibody_states)
plot_exposure_histories(res$exposure_histories_long)
exposure_model_simple_FOI
draw_parameters_random_fx_titer_dep
demography
head(demography)
summary(demography)
generate_pop_demography
demography
head(demography)
demography %>% select(-times) %>% distinct()
##*****************Component 3: Force of Infection and Exposure Model***********
## Specify the number of exposures (eventually, this won't be needed because the serosim function can extract this from the antigen_map)
N_exposure_ids <- 2
## Specify the force of infection array (different format)
group<-c(1,2,3,4)
lambdas <- array(rep(0.5,length(group)), dim=c(length(group),max(times),N_exposure_ids))
lambdas
exposure_model_simple_FOI(1,1,1,1,lambdas, demography)
exposure_model_dem_mod(1,1,1,1,lambdas, demography)
##***********************Component 4: Antigen Map*******************************
## Specify which antigens are present in each exposure type
antigen_map <- tibble(exposure_id=c(1,1,2),antigen_id=c(1,2,1))
antigen_map
a
library(serosolver)
load(example_par_tab)
load("example_par_tab")
example_par_tab
?example_par_tab
