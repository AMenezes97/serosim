name=unlist(aux[[var]]["name"]),
value=sample(aux[[var]][['options']],size=N, prob=aux[[var]][["distribution"]],replace=TRUE)
)
}
vars <- do.call("bind_rows",vars)
vars <- vars %>% pivot_wider(names_from=name,values_from=value)
vars
lambdas <- array(rep(0.1,length(times)), dim=c(length(times),1,1))
lambdas
lambdas[1,1,1]
lambdas[,1,1]
times
N <- 10
times <- seq(0,10,by=1)
demography <- tibble(i=1:N,birth=rep(0,N), death=rep(NA,N))
simulation_settings <- NULL
observation_times <- NULL
lambdas <- array(rep(0.1,length(times)), dim=c(length(times),1,1))
antigen_map <- tibble(exposure_id=1,antigen_id=1)
theta <- list("boost_mean"=2,"boost_sd"=1)
exposure_model <- function(i, t, e, l, lambdas, demography){
p <- lambdas[t, e, l]
p
}
exposure_model(1,1,1,1,lambdas,NULL)
N <- 10
times <- seq(0,10,by=1)
demography <- tibble(i=1:N,birth=rep(0,N), death=rep(NA,N))
simulation_settings <- NULL
observation_times <- NULL
lambdas <- array(rep(0.1,length(times)), dim=c(length(times),1,1))
antigen_map <- tibble(exposure_id=1,antigen_id=1)
theta <- list("boost_mean"=2,"boost_sd"=1)
exposure_model <- function(i, t, e, l, lambdas, demography){
p <- lambdas[t, e, l]
p
}
immunity_model <- function(i, t, e, exposure_histories,
antibody_states, demography, antigen_map,...){
return(1)
}
observation_model <- NULL
draw_parameters <- function(i, t, e, demography, theta, ...){
boost <- rnorm(1, theta[["boost_mean"]],theta[["boost_sd"]])
tibble(i=i, t=t, e=e,name="boost",value=boost)
}
exposure_model(1,1,1,1,lambdas,NULL)
N <- 10
times <- seq(0,10,by=1)
demography <- tibble(i=1:N,birth=rep(0,N), death=rep(NA,N))
simulation_settings <- NULL
observation_times <- NULL
lambdas <- array(rep(0.1,length(times)), dim=c(length(times),1,1))
antigen_map <- tibble(exposure_id=1,antigen_id=1)
theta <- list("boost_mean"=2,"boost_sd"=1)
exposure_model <- function(i, t, e, l, lambdas, demography){
p <- lambdas[t, e, l]
p
}
immunity_model <- function(i, t, e, exposure_histories,
antibody_states, demography, antigen_map,...){
return(1)
}
observation_model <- NULL
draw_parameters <- function(i, t, e, demography, theta, ...){
boost <- rnorm(1, theta[["boost_mean"]],theta[["boost_sd"]])
tibble(i=i, t=t, e=e,name="boost",value=boost)
}
antibody_model <- function(i,t1,ag, exposure_histories,kinetics_parameters,antigen_map){
exp_history <- exposure_histories[i,,]
tmp_boosts <- kinetics_parameters %>% filter(t < t1)
y <- 0
for(ts in unique(tmp_boosts$t)){
y <- y + kinetics_parameters[kinetics_parameters$name == "boost" & kinetics_parameters$t == ts,"value"]
}
y
}
exposure_model(1,1,1,1,lambdas,NULL)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
serosim(simulation_settings, demography, observation_times,
lambdas, antigen_map, theta,
exposure_model, immunity_model, antibody_model, observation_model, draw_parameters)
N <- 10
times <- seq(0,10,by=1)
demography <- tibble(i=1:N,birth=rep(0,N), death=rep(NA,N))
simulation_settings <- list("t_start"=0,"t_end"=10)
observation_times <- NULL
lambdas <- array(rep(0.1,length(times)), dim=c(length(times),1,1))
antigen_map <- tibble(exposure_id=1,antigen_id=1)
theta <- list("boost_mean"=2,"boost_sd"=1)
exposure_model <- function(i, t, e, l, lambdas, demography){
p <- lambdas[t, e, l]
p
}
immunity_model <- function(i, t, e, exposure_histories,
antibody_states, demography, antigen_map,...){
return(1)
}
observation_model <- NULL
draw_parameters <- function(i, t, e, demography, theta, ...){
boost <- rnorm(1, theta[["boost_mean"]],theta[["boost_sd"]])
tibble(i=i, t=t, e=e,name="boost",value=boost)
}
antibody_model <- function(i,t1,ag, exposure_histories,kinetics_parameters,antigen_map){
exp_history <- exposure_histories[i,,]
tmp_boosts <- kinetics_parameters %>% filter(t < t1)
y <- 0
for(ts in unique(tmp_boosts$t)){
y <- y + kinetics_parameters[kinetics_parameters$name == "boost" & kinetics_parameters$t == ts,"value"]
}
y
}
serosim(simulation_settings, demography, observation_times,
lambdas, antigen_map, theta,
exposure_model, immunity_model, antibody_model, observation_model, draw_parameters)
N <- 10
times <- seq(0,10,by=1)
demography <- tibble(i=1:N,birth=rep(0,N), death=rep(NA,N),location=rep(1,N))
simulation_settings <- list("t_start"=0,"t_end"=10)
observation_times <- NULL
lambdas <- array(rep(0.1,length(times)), dim=c(length(times),1,1))
antigen_map <- tibble(exposure_id=1,antigen_id=1)
theta <- list("boost_mean"=2,"boost_sd"=1)
exposure_model <- function(i, t, e, l, lambdas, demography){
p <- lambdas[t, e, l]
p
}
immunity_model <- function(i, t, e, exposure_histories,
antibody_states, demography, antigen_map,...){
return(1)
}
observation_model <- NULL
draw_parameters <- function(i, t, e, demography, theta, ...){
boost <- rnorm(1, theta[["boost_mean"]],theta[["boost_sd"]])
tibble(i=i, t=t, e=e,name="boost",value=boost)
}
antibody_model <- function(i,t1,ag, exposure_histories,kinetics_parameters,antigen_map){
exp_history <- exposure_histories[i,,]
tmp_boosts <- kinetics_parameters %>% filter(t < t1)
y <- 0
for(ts in unique(tmp_boosts$t)){
y <- y + kinetics_parameters[kinetics_parameters$name == "boost" & kinetics_parameters$t == ts,"value"]
}
y
}
serosim(simulation_settings, demography, observation_times,
lambdas, antigen_map, theta,
exposure_model, immunity_model, antibody_model, observation_model, draw_parameters)
serosim <- function(
simulation_settings, ## List of parameters governing the simulation settings
demography=NULL, ## tibble of demographic information for each individual
observation_times=NULL, ## tibble of observation times and antigen for each individual
lambdas, ## 3D matrix giving force of infection for each exposure ID, location and time
antigen_map, ## Object determining relationship between exposure IDs and antigens
theta,
exposure_model, ## Calculates the probability of infection given the FOI matrix, lambda
immunity_model, ## function determining probability of infection conditional on lambdas and individuals immune state
antibody_model, ## function determining antibody state as a function of exposure history and kinetics parameters (theta)
observation_model, ## function generating observed titers as a function of latent titers and theta
draw_parameters, ## function to simulate antibody kinetics parameters
...
){
## Extract key demographic information
indivs <- unique(demography$i)
N <- length(indivs)
## Note "birth" refers to first time point in the population and "death" refers to time point of removal from population
birth_times <- demography %>% select(i, birth) %>% distinct()
death_times <- demography %>% select(i, death) %>% distinct()
## If no location information provided, assume 1 location
## ...
locations <- demography %>% select(i, location) %>% distinct()
## Extract information on number of exposure types
exposure_ids <- unique(antigen_map$exposure_id)
antigen_ids <- unique(antigen_map$antigen_id)
N_exposure_ids <- length(exposure_ids)
N_antigen_ids <- length(antigen_ids)
simulation_times <- seq(simulation_settings[["t_start"]],simulation_settings[["t_end"]],1)
## Create empty matrix to store exposure histories
exposure_histories <- create_matrix(N_exposure_ids, N, simulation_times, fill=NA)
antibody_states <- create_matrix(N_antigen_ids, N, simulation_times, fill=0)
kinetics_parameters <- NULL
browser()
## Merge in any pre-specified exposure history information
## ...
message(cat("Beginning simulation\n"))
## For each individual
for(i in indivs){
message(cat("Individual: ", i, "\n"))
## Pull birth time for this individual
birth_time <- birth_times$birth[i]
death_time <- death_times$death[i]
l <- locations$location[i]
## Only consider times that the individual was alive for
simulation_times_tmp <- simulation_times[simulation_times >= birth_time &
simulation_times <= death_time]
## Go through all times relevant to this individual
for(t in simulation_times_tmp){
## Nth exposure
index <- 1
kinetics_parameters_tmp <- NULL
## Work out exposure result for each exposure ID
for(e in exposure_ids){
## Only update if exposure history entry is NA here. If not NA, then pre-specified
if(is.na(exposure_histories[i,t,e])){
## What is the probability that exposure occurred?
prob_exposed <- exposure_model(i, t, e, l, lambdas, demography, ...)
## If an exposure event occurred, what's the probability
## of successful infection/vaccination?
successful_exposure <- 0
if(runif(1)<prob_exposed){
prob_success <- immunity_model(i, t, e, exposure_histories,
antibody_states, demography,
antigen_map, ...)
## Randomly assign success of exposure event based on immune state
successful_exposure <- as.integer(runif(1) < prob_success)
## Create kinetics parameters for this exposure event
## Each successful exposure event will create a tibble with parameters
## for this event, drawn from information given in theta
## We also pass the demographic information in case we want demography-specific parameters
kinetics_parameters_tmp[[index]] <- draw_parameters(i, t, e,
demography, theta, ...)
index <- index + 1
}
kinetics_parameters[[i]] <- do.call("bind_rows", kinetics_parameters_tmp)
exposure_histories[i,t,e] <- successful_exposure
}
}
## Work out antibody state for each antigen
## The reason we nest this at the same level as the exposure history generation is
## that exposure histories may be conditional on antibody state
if(FALSE){
for(ag in antigen_ids){
antibody_states[i,t,ag] <- antibody_model(i, t, ag, exposure_histories,
kinetics_parameters, antigen_map)
}
}
}
}
all_kinetics_parameters <- do.call("bind_rows", kinetics_parameters)
## Observation process
return(list("exposure_histories"=exposure_histories,
"antibody_states"=antibody_states,
"observed_antibody_states"=obsevered_antibody_states,
"kinetics_parameters"=all_kinetics_parameters))
}
N <- 10
times <- seq(0,10,by=1)
demography <- tibble(i=1:N,birth=rep(0,N), death=rep(NA,N),location=rep(1,N))
simulation_settings <- list("t_start"=0,"t_end"=10)
observation_times <- NULL
lambdas <- array(rep(0.1,length(times)), dim=c(length(times),1,1))
antigen_map <- tibble(exposure_id=1,antigen_id=1)
theta <- list("boost_mean"=2,"boost_sd"=1)
exposure_model <- function(i, t, e, l, lambdas, demography){
p <- lambdas[t, e, l]
p
}
immunity_model <- function(i, t, e, exposure_histories,
antibody_states, demography, antigen_map,...){
return(1)
}
observation_model <- NULL
draw_parameters <- function(i, t, e, demography, theta, ...){
boost <- rnorm(1, theta[["boost_mean"]],theta[["boost_sd"]])
tibble(i=i, t=t, e=e,name="boost",value=boost)
}
antibody_model <- function(i,t1,ag, exposure_histories,kinetics_parameters,antigen_map){
exp_history <- exposure_histories[i,,]
tmp_boosts <- kinetics_parameters %>% filter(t < t1)
y <- 0
for(ts in unique(tmp_boosts$t)){
y <- y + kinetics_parameters[kinetics_parameters$name == "boost" & kinetics_parameters$t == ts,"value"]
}
y
}
serosim(simulation_settings, demography, observation_times,
lambdas, antigen_map, theta,
exposure_model, immunity_model, antibody_model, observation_model, draw_parameters)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
N <- 10
times <- seq(0,10,by=1)
demography <- tibble(i=1:N,birth=rep(0,N), death=rep(NA,N),location=rep(1,N))
simulation_settings <- list("t_start"=0,"t_end"=10)
observation_times <- NULL
lambdas <- array(rep(0.1,length(times)), dim=c(length(times),1,1))
antigen_map <- tibble(exposure_id=1,antigen_id=1)
theta <- list("boost_mean"=2,"boost_sd"=1)
exposure_model <- function(i, t, e, l, lambdas, demography){
p <- lambdas[t, e, l]
p
}
immunity_model <- function(i, t, e, exposure_histories,
antibody_states, demography, antigen_map,...){
return(1)
}
observation_model <- NULL
draw_parameters <- function(i, t, e, demography, theta, ...){
boost <- rnorm(1, theta[["boost_mean"]],theta[["boost_sd"]])
tibble(i=i, t=t, e=e,name="boost",value=boost)
}
antibody_model <- function(i,t1,ag, exposure_histories,kinetics_parameters,antigen_map){
exp_history <- exposure_histories[i,,]
tmp_boosts <- kinetics_parameters %>% filter(t < t1)
y <- 0
for(ts in unique(tmp_boosts$t)){
y <- y + kinetics_parameters[kinetics_parameters$name == "boost" & kinetics_parameters$t == ts,"value"]
}
y
}
serosim(simulation_settings, demography, observation_times,
lambdas, antigen_map, theta,
exposure_model, immunity_model, antibody_model, observation_model, draw_parameters)
N <- 10
times <- seq(0,10,by=1)
demography <- tibble(i=1:N,birth=rep(0,N), death=rep(NA,N),location=rep(1,N))
simulation_settings <- list("t_start"=0,"t_end"=10)
observation_times <- NULL
lambdas <- array(rep(0.1,length(times)), dim=c(length(times),1,1))
antigen_map <- tibble(exposure_id=1,antigen_id=1)
theta <- list("boost_mean"=2,"boost_sd"=1)
exposure_model <- function(i, t, e, l, lambdas, demography){
p <- lambdas[t, e, l]
p
}
immunity_model <- function(i, t, e, exposure_histories,
antibody_states, demography, antigen_map,...){
return(1)
}
observation_model <- NULL
draw_parameters <- function(i, t, e, demography, theta, ...){
boost <- rnorm(1, theta[["boost_mean"]],theta[["boost_sd"]])
tibble(i=i, t=t, e=e,name="boost",value=boost)
}
antibody_model <- function(i,t1,ag, exposure_histories,kinetics_parameters,antigen_map){
exp_history <- exposure_histories[i,,]
tmp_boosts <- kinetics_parameters %>% filter(t < t1)
y <- 0
for(ts in unique(tmp_boosts$t)){
y <- y + kinetics_parameters[kinetics_parameters$name == "boost" & kinetics_parameters$t == ts,"value"]
}
y
}
serosim(simulation_settings, demography, observation_times,
lambdas, antigen_map, theta,
exposure_model, immunity_model, antibody_model, observation_model, draw_parameters)
exposure_histories
dim(exposure_histories)
create_matrix
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
exposure_histories
prob_exposed
exposure_model
lamdas
lambdas
i
t
simulation_times_tmp
simulationtimes
simulation_times
birth_time
death_time
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
exposure_histories
i
t
e
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
kinetics_parameters_tmp
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
kinetics_parameters_tmp
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
kinetics_parameters
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
kinetics_parameters[[i]]
bind_rows(kinetics_parameters[[i]],
draw_parameters(i, t, e, demography, theta, ...))
bind_rows(kinetics_parameters[[i]],
draw_parameters(i, t, e, demography, theta, ...))
bind_rows(kinetics_parameters[[i]],
draw_parameters(i, t, e, demography, theta, ...))
kinetics_parameters
i
kinetics_parameters[[2]]
kinetics_parameters[[2]] <- NULL
kinetics_parameters
kinetics_parameters[[2]]
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
kinetics_parameters
i
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
i
N
kinetics_parameters
length(kinetics_parameters)
vector(mode="list",length=N)
vector(mode="list",length=N)
vector(mode="list",length=N)
vector(mode="list",length=N)
vector(mode="list",length=N)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
exp_history
exposure_histories
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
antibody_states
dim(antibody_states)
ag
antibody_states[i,t,ag]
antibody_model(i, t, ag, exposure_histories,
kinetics_parameters, antigen_map)
antibody_model(i, t, ag, exposure_histories,
kinetics_parameters, antigen_map)
t
t
t
t
t
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
res <- serosim(simulation_settings, demography, observation_times,
lambdas, antigen_map, theta,
exposure_model, immunity_model, antibody_model, observation_model, draw_parameters)
image(t(res$antibody_states))
res$antibody_states
image(t(res$antibody_states[,,1]))
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
exposure_histories
exp_history
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
res
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
res
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
exp_history
t1
t1-1
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/GitHub/serosim/R/run_simulation_JAH.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
